<?xml version="1.0" encoding="UTF-8"?>
<root><path path="output/validaemail" main="output/validaemail/index.php"><file name="index.php" preprocess="">&lt;?php
/*
require_once("ValidateEmail.php");

// the email to validate  
$email = 'davidcallizaya@gmail.com';  
// an optional sender  
$sender = 'user@example.com';  
// instantiate the class  
$SMTP_Valid = new SMTP_validateEmail();  
// do the validation  
$result = $SMTP_Valid-&gt;validate($email, $sender);  
// view results  
var_dump($result);  
echo $email.' is '.($result ? 'valid' : 'invalid')."\n";  
  
// send email?   
if ($result) {  
  //mail(...);  
}
*/

function validate_email($email){
   $mailparts=explode("@",$email);
   $hostname = $mailparts[1];

   // validate email address syntax
   $exp = "^[a-z\'0-9]+([._-][a-z\'0-9]+)*@([a-z0-9]+([._-][a-z0-9]+))+$";
   $b_valid_syntax=eregi($exp, $email);
   // get mx addresses by getmxrr
   $b_mx_avail=getmxrr( $hostname, $mx_records, $mx_weight );
var_dump($b_mx_avail);
   $b_server_found=0;

   if($b_valid_syntax &amp;&amp; $b_mx_avail){
     // copy mx records and weight into array $mxs
     $mxs=array();

     for($i=0;$i&lt;count($mx_records);$i++){
       $mxs[$mx_weight[$i]]=$mx_records[$i];
     }

     // sort array mxs to get servers with highest prio
     ksort ($mxs, SORT_NUMERIC );
     reset ($mxs);

     while (list ($mx_weight, $mx_host) = each ($mxs) ) {
       if($b_server_found == 0){

         //try connection on port 25
         $fp = @fsockopen($mx_host,25, $errno, $errstr, 2);
         if($fp){
           $ms_resp="";
           // say HELO to mailserver
           $ms_resp.=send_command($fp, "HELO microsoft.com");

           // initialize sending mail
           $ms_resp.=send_command($fp, "MAIL FROM:&lt;support@microsoft.com&gt;");

           // try receipent address, will return 250 when ok..
           $rcpt_text=send_command($fp, "RCPT TO:&lt;".$email."&gt;");
           $ms_resp.=$rcpt_text;
          
           if(substr( $rcpt_text, 0, 3) == "250")
             $b_server_found=1;

           // quit mail server connection
           $ms_resp.=send_command($fp, "QUIT");

         fclose($fp);

         }

       }
    }
  }
  return $b_server_found;
}

function send_command($fp, $out){

  fwrite($fp, $out . "\r\n");
  return get_data($fp);
}

function get_data($fp){
  $s="";
  stream_set_timeout($fp, 2);

  for($i=0;$i&lt;2;$i++)
    $s.=fgets($fp, 1024);

  return $s;
}

// support windows platforms
if (!function_exists ('getmxrr') ) {
  function getmxrr($hostname, &amp;$mxhosts, &amp;$mxweight) {
    if (!is_array ($mxhosts) ) {
      $mxhosts = array ();
    }

    if (!empty ($hostname) ) {
      $output = "";
      @exec ("nslookup.exe -type=MX $hostname.", $output);
      $imx=-1;

      foreach ($output as $line) {
        $imx++;
        $parts = "";
        if (preg_match ("/^$hostname\tMX preference = ([0-9]+), mail exchanger = (.*)$/", $line, $parts) ) {
          $mxweight[$imx] = $parts[1];
          $mxhosts[$imx] = $parts[2];
        }
      }
      return ($imx!=-1);
    }
    return false;
  }
}

var_dump(validate_email("davidcallizaya@gmail.com"));</file><file name="ValidateEmail.php" preprocess="">&lt;?php  
   
 /** 
 * Validate Email Addresses Via SMTP 
 * This queries the SMTP server to see if the email address is accepted. 
 * @copyright http://creativecommons.org/licenses/by/2.0/ - Please keep this comment intact 
 * @author gabe@fijiwebdesign.com 
 * @contributers adnan@barakatdesigns.net 
 * @version 0.1a 
 */  
class SMTP_validateEmail {  
  
 /** 
  * PHP Socket resource to remote MTA 
  * @var resource $sock  
  */  
 var $sock;  
  
 /** 
  * Current User being validated 
  */  
 var $user;  
 /** 
  * Current domain where user is being validated 
  */  
 var $domain;  
 /** 
  * List of domains to validate users on 
  */  
 var $domains;  
 /** 
  * SMTP Port 
  */  
 var $port = 25;  
 /** 
  * Maximum Connection Time to an MTA  
  */  
 var $max_conn_time = 30;  
 /** 
  * Maximum time to read from socket 
  */  
 var $max_read_time = 5;  
   
 /** 
  * username of sender 
  */  
 var $from_user = 'user';  
 /** 
  * Host Name of sender 
  */  
 var $from_domain = 'localhost';  
   
 /** 
  * Nameservers to use when make DNS query for MX entries 
  * @var Array $nameservers  
  */  
 var $nameservers = array(  
 //'192.168.101.13'  
);  
   
 var $debug = false;  
  
 /** 
  * Initializes the Class 
  * @return SMTP_validateEmail Instance 
  * @param $email Array[optional] List of Emails to Validate 
  * @param $sender String[optional] Email of validator 
  */  
 function SMTP_validateEmail($emails = false, $sender = false) {  
  if ($emails) {  
   $this-&gt;setEmails($emails);  
  }  
  if ($sender) {  
   $this-&gt;setSenderEmail($sender);  
  }  
 }  
   
 function _parseEmail($email) {  
  $parts = explode('@', $email);  
 $domain = array_pop($parts);  
 $user= implode('@', $parts);  
 return array($user, $domain);  
 }  
   
 /** 
  * Set the Emails to validate 
  * @param $emails Array List of Emails 
  */  
 function setEmails($emails) {  
  foreach($emails as $email) {  
  list($user, $domain) = $this-&gt;_parseEmail($email);  
  if (!isset($this-&gt;domains[$domain])) {  
    $this-&gt;domains[$domain] = array();  
  }  
  $this-&gt;domains[$domain][] = $user;  
 }  
 }  
   
 /** 
  * Set the Email of the sender/validator 
  * @param $email String 
  */  
 function setSenderEmail($email) {  
 $parts = $this-&gt;_parseEmail($email);  
 $this-&gt;from_user = $parts[0];  
 $this-&gt;from_domain = $parts[1];  
 }  
   
 /** 
 * Validate Email Addresses 
 * @param String $emails Emails to validate (recipient emails) 
 * @param String $sender Sender's Email 
 * @return Array Associative List of Emails and their validation results 
 */  
 function validate($emails = false, $sender = false) {  
    
  $results = array();  
  
  if ($emails) {  
   $this-&gt;setEmails($emails);  
  }  
  if ($sender) {  
   $this-&gt;setSenderEmail($sender);  
  }  
  
  // query the MTAs on each Domain  
  foreach($this-&gt;domains as $domain=&gt;$users) {  
     
  $mxs = array();  
    
   // retrieve SMTP Server via MX query on domain  
   list($hosts, $mxweights) = $this-&gt;queryMX($domain);  
  
   // retrieve MX priorities  
   for($n=0; $n &lt; count($hosts); $n++){  
    $mxs[$hosts[$n]] = $mxweights[$n];  
   }  
   asort($mxs);  
   
   // last fallback is the original domain  
   array_push($mxs, $this-&gt;domain);  
     
   $this-&gt;debug(print_r($mxs, 1));  
     
   $timeout = $this-&gt;max_conn_time/count($hosts);  
      
   // try each host  
   while(list($host) = each($mxs)) {  
    // connect to SMTP server  
    $this-&gt;debug("try $host:$this-&gt;port\n");  
    if ($this-&gt;sock = fsockopen($host, $this-&gt;port, $errno, $errstr, (float) $timeout)) {  
     stream_set_timeout($this-&gt;sock, $this-&gt;max_read_time);  
     break;  
    }  
   }  
    
   // did we get a TCP socket  
   if ($this-&gt;sock) {  
    $reply = fread($this-&gt;sock, 2082);  
    $this-&gt;debug("&lt;&lt;&lt;\n$reply");  
      
    preg_match('/^([0-9]{3}) /ims', $reply, $matches);  
    $code = isset($matches[1]) ? $matches[1] : '';  
   
    if($code != '220') {  
     // MTA gave an error...  
     foreach($users as $user) {  
      $results[$user.'@'.$domain] = false;  
  }  
  continue;  
    }  
  
    // say helo  
    $this-&gt;send("HELO ".$this-&gt;from_domain);  
    // tell of sender  
    $this-&gt;send("MAIL FROM: &lt;".$this-&gt;from_user.'@'.$this-&gt;from_domain."&gt;");  
      
    // ask for each recepient on this domain  
    foreach($users as $user) {  
      
     // ask of recepient  
     $reply = $this-&gt;send("RCPT TO: &lt;".$user.'@'.$domain."&gt;");  
       
      // get code and msg from response  
     preg_match('/^([0-9]{3}) /ims', $reply, $matches);  
     $code = isset($matches[1]) ? $matches[1] : '';  
    
     if ($code == '250') {  
      // you received 250 so the email address was accepted  
      $results[$user.'@'.$domain] = true;  
     } elseif ($code == '451' || $code == '452') {  
   // you received 451 so the email address was greylisted (or some temporary error occured on the MTA) - so assume is ok  
   $results[$user.'@'.$domain] = true;  
     } else {  
      $results[$user.'@'.$domain] = false;  
     }  
      
    }  
      
    // quit  
    $this-&gt;send("quit");  
    // close socket  
    fclose($this-&gt;sock);  
     
   }  
  }  
 return $results;  
 }  
  
  
 function send($msg) {  
  fwrite($this-&gt;sock, $msg."\r\n");  
  
  $reply = fread($this-&gt;sock, 2082);  
  
  $this-&gt;debug("&gt;&gt;&gt;\n$msg\n");  
  $this-&gt;debug("&lt;&lt;&lt;\n$reply");  
    
  return $reply;  
 }  
   
 /** 
  * Query DNS server for MX entries 
  * @return  
  */  
 function queryMX($domain) {  
  $hosts = array();  
 $mxweights = array();  
  if (function_exists('getmxrr')) {  
   getmxrr($domain, $hosts, $mxweights);  
  } else {  
   // windows, we need Net_DNS  
  require_once 'Net/DNS.php';  
  
  $resolver = new Net_DNS_Resolver();  
  $resolver-&gt;debug = $this-&gt;debug;  
  // nameservers to query  
  $resolver-&gt;nameservers = $this-&gt;nameservers;  
  $resp = $resolver-&gt;query($domain, 'MX');  
  if ($resp) {  
   foreach($resp-&gt;answer as $answer) {  
    $hosts[] = $answer-&gt;exchange;  
    $mxweights[] = $answer-&gt;preference;  
   }  
  }  
    
  }  
 return array($hosts, $mxweights);  
 }  
   
 /** 
  * Simple function to replicate PHP 5 behaviour. http://php.net/microtime 
  */  
 function microtime_float() {  
  list($usec, $sec) = explode(" ", microtime());  
  return ((float)$usec + (float)$sec);  
 }  
  
 function debug($str) {  
  if ($this-&gt;debug) {  
   echo htmlentities($str);  
  }  
 }  
  
}  
  
   
?&gt;</file></path></root>