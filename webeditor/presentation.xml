<?xml version="1.0" encoding="UTF-8"?>
<root><path path="output/presentacion" main="output/presentacion/main.php"><file name="src/presentacion/SvgHelper.php" preprocess="">&lt;?php
namespace presentacion;

use Symfony\Component\Console\Helper\Helper as HelperBase;
use Symfony\Component\Console\Application as BaseApplication;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Hoathis\SymfonyConsoleBridge\Helper as Helper;
use DomDocument;

class SvgHelper extends HelperBase {
    const NAME = 'svg';
    public function getName()
    {
        return self::NAME;
    }
    protected function cubicbezier($cursor, $output, $x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3, $n = 20) {
        $pts = array();

        for($i = 0; $i &lt;= $n; $i++) {
            $t = $i / $n;
            $t1 = 1 - $t;
            $a = pow($t1, 3);
            $b = 3 * $t * pow($t1, 2);
            $c = 3 * pow($t, 2) * $t1;
            $d = pow($t, 3);

            $x = round($a * $x0 + $b * $x1 + $c * $x2 + $d * $x3);
            $y = round($a * $y0 + $b * $y1 + $c * $y2 + $d * $y3);
            $pts[$i] = array($x, $y);
        }

        for($i = 0; $i &lt; $n; $i++) {
            //imageline($img, $pts[$i][0], $pts[$i][1], $pts[$i+1][0], $pts[$i+1][1], $col);
            $this-&gt;line($cursor, $output, $pts[$i][0], $pts[$i][1], $pts[$i+1][0], $pts[$i+1][1]);
        }
    }
    function line($cursor, $output, $x0,$y0,$x1,$y1){
        $x=1+floor($x0*$this-&gt;zoom);
        $y=1+floor($y0*$this-&gt;zoom);
        $x2=1+floor($x1*$this-&gt;zoom);
        $y2=1+floor($y1*$this-&gt;zoom);
        if(($x2==$x) &amp;&amp; ($y2==$y)) {
        } elseif(abs($x2-$x)&gt;abs($y2-$y)) {
            $diff=$x2&gt;$x?1:-1;
            $delta=($y2-$y)/abs($x2-$x);
            $y1=$y;
            for(;(($diff&gt;0) &amp;&amp; ($x&lt;=$x2)) || (($diff&lt;0) &amp;&amp; ($x&gt;=$x2));$x+=$diff){
                $y=floor($y1);
                $cursor-&gt;moveTo($output, max($x,0), max($y,0));
                $output-&gt;write('*');
                $y1+=$delta;
            }
        } else {
            $diff=$y2&gt;$y?1:-1;
            $delta=($x2-$x)/abs($y2-$y);
            $x1=$x;
            $cursor-&gt;moveTo($output, 10, 10);
            for(;(($diff&gt;0) &amp;&amp; ($y&lt;=$y2)) || (($diff&lt;0) &amp;&amp; ($y&gt;=$y2));$y+=$diff){
                $x=floor($x1);
                $cursor-&gt;moveTo($output, max($x,0), max($y,0));
                $output-&gt;write('*');
                $x1+=$delta;
            }
        }
    }
    public function draw(Helper\CursorHelper $cursor, OutputInterface $output, $file, $width, $usleep) {
        $dom = new DOMDocument();
        $dom-&gt;load($file);
        $x=0;
        $y=0;
        $maxX=$dom-&gt;getElementsByTagName('svg')-&gt;item(0)-&gt;getAttribute('width')*1;
        $maxY=$dom-&gt;getElementsByTagName('svg')-&gt;item(0)-&gt;getAttribute('height')*1;
        $this-&gt;zoom = $width/$maxX;
        foreach($dom-&gt;getElementsByTagName('path') as $path) {
            $d=$path-&gt;getAttribute('d');
            $style=$path-&gt;getAttribute('style');
            $maStyle=[];
            preg_match('/fill\:([^;]+); stroke\:([^;]+);/', $style, $maStyle);
            list($style, $fill, $stroke)=$maStyle;
            if($fill==='#ffffff') {
                //$cursor-&gt;colorize($output, 'fg(0) bg(0)');
                //continue;
            } else {
                $cursor-&gt;colorize($output, 'fg(default) bg(default)');
            }
            $matches=[];
            if(preg_match_all('/([^\d\. -])([\d\. -]*)/', $d, $matches, PREG_SET_ORDER)) {
                foreach($matches as $ma){
                    $cmd=$ma[1];
                    $par=$ma[2];
                    $pars=explode(" ",$par);
                    switch($cmd){
                        case 'M':
                            $x1=$pars[0]*1;
                            $y1=$pars[1]*1;
                            $x=$x1;
                            $y=$y1;
                            $x0=$x1;
                            $y0=$y1;
                            break;
                        case 'C':
                            $x1=$pars[0]*1;
                            $y1=$pars[1]*1;
                            $x2=$pars[2]*1;
                            $y2=$pars[3]*1;
                            $x3=$pars[4]*1;
                            $y3=$pars[5]*1;
                            $this-&gt;cubicbezier($cursor, $output, $x, $y, $x1, $y1, $x2, $y2, $x3, $y3);
                            $x=$x1;
                            $y=$y1;
                            break;
                        case 'L':
                            $x1=$pars[0]*1;
                            $y1=$pars[1]*1;
                            $this-&gt;line($cursor, $output, $x, $y, $x1,$y1);
                            $x=$x1;
                            $y=$y1;
                            break;
                        case 'z':
                            if($x0!==false) {
                                //$this-&gt;line($cursor, $output, $x, $y, $x0,$y0);
                                $x=$x0;
                                $y=$y0;
                            }
                            break;
                    }
                    usleep($usleep);
                }
            }
        }
    }
}
</file><file name="src/presentacion/Application.php" preprocess="">&lt;?php
namespace presentacion;

use Symfony\Component\Console\Helper\Helper as HelperBase;
use Symfony\Component\Console\Application as BaseApplication;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Hoathis\SymfonyConsoleBridge\Helper as Helper;

class Application extends BaseApplication
{
    protected function getDefaultHelperSet()
    {
        $set = parent::getDefaultHelperSet();

        $set-&gt;set(new Helper\WindowHelper());
        $set-&gt;set(new Helper\CursorHelper());
        $set-&gt;set(new Helper\ReadlineHelper());
        $set-&gt;set(new Helper\PagerHelper());
        $set-&gt;set(new Helper\TputHelper());
        $set-&gt;set(new SvgHelper());

        return $set;
    }

}

</file><file name="main.php" preprocess="">#!/usr/local/bin/php
&lt;?php
require('vendor/autoload.php');
use Symfony\Component\Console\Helper\Helper as HelperBase;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Hoathis\SymfonyConsoleBridge\Helper as Helper;
use presentacion\Application;

$app = new Application();

$app
    -&gt;register('start')
    -&gt;setCode(function(InputInterface $input, OutputInterface $output) use ($app) {
        /* @var $cursor Helper\CursorHelper*/
        /* @var $window Helper\WindowHelper*/
        /* @var $svg SvgHelper*/
        $cursor = $app-&gt;getHelperSet()-&gt;get('cursor');
        $svg = $app-&gt;getHelperSet()-&gt;get('svg');
        $window = $app-&gt;getHelperSet()-&gt;get('window');
        $tput = $app-&gt;getHelperSet()-&gt;get('tput');
        
        $cursor-&gt;clear($output, Helper\CursorHelper::CLEAR_SCREEN);
        $file = 'ProcessMaker.svg';
        $x=5;
        $y=6;
        $svg-&gt;draw($cursor, $output, $file, 125, 10000);
    })
;
$app-&gt;run();

</file></path></root>