["define (FALSE, 0)","define (NULL, 0)","define (TRUE, 0)","define (__LINE__, 0)","define (__FILE__, 0)","define (__FUNCTION__, 0)","define (__CLASS__, 0)","define (__METHOD__, 0)","define (PHP_VERSION, 0)","define (PHP_OS, 0)","define (DEFAULT_INCLUDE_PATH, 0)","define (PEAR_INSTALL_DIR, 0)","define (PEAR_EXTENSION_DIR, 0)","define (PHP_EXTENSION_DIR, 0)","define (PHP_BINDIR, 0)","define (PHP_LIBDIR, 0)","define (PHP_DATADIR, 0)","define (PHP_SYSCONFDIR, 0)","define (PHP_LOCALSTATEDIR, 0)","define (PHP_CONFIG_FILE_PATH, 0)","define (PHP_OUTPUT_HANDLER_START, 0)","define (PHP_OUTPUT_HANDLER_CONT, 0)","define (PHP_OUTPUT_HANDLER_END, 0)","define (E_ERROR, 0)","define (E_WARNING, 0)","define (E_PARSE, 0)","define (E_NOTICE, 0)","define (E_CORE_ERROR, 0)","define (E_CORE_WARNING, 0)","define (E_COMPILE_ERROR, 0)","define (E_COMPILE_WARNING, 0)","define (E_USER_ERROR, 0)","define (E_USER_WARNING, 0)","define (E_USER_NOTICE, 0)","define (E_ALL, 0)","define (ABDAY_1, 0)","define (ABDAY_2, 0)","define (ABDAY_3, 0)","define (ABDAY_4, 0)","define (ABDAY_5, 0)","define (ABDAY_6, 0)","define (ABDAY_7, 0)","define (ABMON_1, 0)","define (ABMON_10, 0)","define (ABMON_11, 0)","define (ABMON_12, 0)","define (ABMON_2, 0)","define (ABMON_3, 0)","define (ABMON_4, 0)","define (ABMON_5, 0)","define (ABMON_6, 0)","define (ABMON_7, 0)","define (ABMON_8, 0)","define (ABMON_9, 0)","define (ALT_DIGITS, 0)","define (AM_STR, 0)","define (ASSERT_ACTIVE, 0)","define (ASSERT_BAIL, 0)","define (ASSERT_CALLBACK, 0)","define (ASSERT_QUIET_EVAL, 0)","define (ASSERT_WARNING, 0)","define (CASE_LOWER, 0)","define (CASE_UPPER, 0)","define (CHAR_MAX, 0)","define (CODESET, 0)","define (CONNECTION_ABORTED, 0)","define (CONNECTION_NORMAL, 0)","define (CONNECTION_TIMEOUT, 0)","define (COUNT_NORMAL, 0)","define (COUNT_RECURSIVE, 0)","define (CREDITS_ALL, 0)","define (CREDITS_DOCS, 0)","define (CREDITS_FULLPAGE, 0)","define (CREDITS_GENERAL, 0)","define (CREDITS_GROUP, 0)","define (CREDITS_MODULES, 0)","define (CREDITS_QA, 0)","define (CREDITS_SAPI, 0)","define (CRNCYSTR, 0)","define (CRYPT_BLOWFISH, 0)","define (CRYPT_EXT_DES, 0)","define (CRYPT_MD5, 0)","define (CRYPT_SALT_LENGTH, 0)","define (CRYPT_STD_DES, 0)","define (CURRENCY_SYMBOL, 0)","define (DAY_1, 0)","define (DAY_2, 0)","define (DAY_3, 0)","define (DAY_4, 0)","define (DAY_5, 0)","define (DAY_6, 0)","define (DAY_7, 0)","define (DECIMAL_POINT, 0)","define (DIRECTORY_SEPARATOR, 0)","define (D_FMT, 0)","define (D_T_FMT, 0)","define (ENT_COMPAT, 0)","define (ENT_NOQUOTES, 0)","define (ENT_QUOTES, 0)","define (ERA, 0)","define (ERA_D_FMT, 0)","define (ERA_D_T_FMT, 0)","define (ERA_T_FMT, 0)","define (ERA_YEAR, 0)","define (EXTR_IF_EXISTS, 0)","define (EXTR_OVERWRITE, 0)","define (EXTR_PREFIX_ALL, 0)","define (EXTR_PREFIX_IF_EXISTS, 0)","define (EXTR_PREFIX_INVALID, 0)","define (EXTR_PREFIX_SAME, 0)","define (EXTR_SKIP, 0)","define (FRAC_DIGITS, 0)","define (GROUPING, 0)","define (HTML_ENTITIES, 0)","define (HTML_SPECIALCHARS, 0)","define (INFO_ALL, 0)","define (INFO_CONFIGURATION, 0)","define (INFO_CREDITS, 0)","define (INFO_ENVIRONMENT, 0)","define (INFO_GENERAL, 0)","define (INFO_LICENSE, 0)","define (INFO_MODULES, 0)","define (INFO_VARIABLES, 0)","define (INI_ALL, 0)","define (INI_PERDIR, 0)","define (INI_SYSTEM, 0)","define (INI_USER, 0)","define (INT_CURR_SYMBOL, 0)","define (INT_FRAC_DIGITS, 0)","define (LC_ALL, 0)","define (LC_COLLATE, 0)","define (LC_CTYPE, 0)","define (LC_MESSAGES, 0)","define (LC_MONETARY, 0)","define (LC_NUMERIC, 0)","define (LC_TIME, 0)","define (LOCK_EX, 0)","define (LOCK_NB, 0)","define (LOCK_SH, 0)","define (LOCK_UN, 0)","define (LOG_ALERT, 0)","define (LOG_AUTH, 0)","define (LOG_AUTHPRIV, 0)","define (LOG_CONS, 0)","define (LOG_CRIT, 0)","define (LOG_CRON, 0)","define (LOG_DAEMON, 0)","define (LOG_DEBUG, 0)","define (LOG_EMERG, 0)","define (LOG_ERR, 0)","define (LOG_INFO, 0)","define (LOG_KERN, 0)","define (LOG_LOCAL0, 0)","define (LOG_LOCAL1, 0)","define (LOG_LOCAL2, 0)","define (LOG_LOCAL3, 0)","define (LOG_LOCAL4, 0)","define (LOG_LOCAL5, 0)","define (LOG_LOCAL6, 0)","define (LOG_LOCAL7, 0)","define (LOG_LPR, 0)","define (LOG_MAIL, 0)","define (LOG_NDELAY, 0)","define (LOG_NEWS, 0)","define (LOG_NOTICE, 0)","define (LOG_NOWAIT, 0)","define (LOG_ODELAY, 0)","define (LOG_PERROR, 0)","define (LOG_PID, 0)","define (LOG_SYSLOG, 0)","define (LOG_USER, 0)","define (LOG_UUCP, 0)","define (LOG_WARNING, 0)","define (MON_1, 0)","define (MON_10, 0)","define (MON_11, 0)","define (MON_12, 0)","define (MON_2, 0)","define (MON_3, 0)","define (MON_4, 0)","define (MON_5, 0)","define (MON_6, 0)","define (MON_7, 0)","define (MON_8, 0)","define (MON_9, 0)","define (MON_DECIMAL_POINT, 0)","define (MON_GROUPING, 0)","define (MON_THOUSANDS_SEP, 0)","define (M_1_PI, 0)","define (M_2_PI, 0)","define (M_2_SQRTPI, 0)","define (M_E, 0)","define (M_LN10, 0)","define (M_LN2, 0)","define (M_LOG10E, 0)","define (M_LOG2E, 0)","define (M_PI, 0)","define (M_PI_2, 0)","define (M_PI_4, 0)","define (M_SQRT1_2, 0)","define (M_SQRT2, 0)","define (NEGATIVE_SIGN, 0)","define (NOEXPR, 0)","define (NOSTR, 0)","define (N_CS_PRECEDES, 0)","define (N_SEP_BY_SPACE, 0)","define (N_SIGN_POSN, 0)","define (PATHINFO_BASENAME, 0)","define (PATHINFO_DIRNAME, 0)","define (PATHINFO_EXTENSION, 0)","define (PM_STR, 0)","define (POSITIVE_SIGN, 0)","define (P_CS_PRECEDES, 0)","define (P_SEP_BY_SPACE, 0)","define (P_SIGN_POSN, 0)","define (RADIXCHAR, 0)","define (SEEK_CUR, 0)","define (SEEK_END, 0)","define (SEEK_SET, 0)","define (SORT_ASC, 0)","define (SORT_DESC, 0)","define (SORT_NUMERIC, 0)","define (SORT_REGULAR, 0)","define (SORT_STRING, 0)","define (STR_PAD_BOTH, 0)","define (STR_PAD_LEFT, 0)","define (STR_PAD_RIGHT, 0)","define (THOUSANDS_SEP, 0)","define (THOUSEP, 0)","define (T_FMT, 0)","define (T_FMT_AMPM, 0)","define (YESEXPR, 0)","define (YESSTR, 0)","function","Z_LVAL(zval)","Z_DVAL(zval)","Z_STRVAL(zval)","Z_STRLEN(zval)","Z_ARRVAL(zval)","Z_LVAL_P(zval)","Z_DVAL_P(zval)","Z_STRVAL_P(zval_p)","Z_STRLEN_P(zval_p)","Z_ARRVAL_P(zval_p)","Z_LVAL_PP(zval_pp)","Z_DVAL_PP(zval_pp)","Z_STRVAL_PP(zval_pp)","Z_STRLEN_PP(zval_pp)","Z_ARRVAL_PP(zval_pp)","require(filename)","include(filename)","require_once(filename)","include_once(filename)","apache_child_terminate()","apache_lookup_uri(string filename)","apache_note(string note_name [, string note_value])","apache_request_headers()","apache_response_headers()","apache_setenv(string variable, string value [, bool walk_to_top])","ascii2ebcdic(string ascii_str)","ebcdic2ascii(string ebcdic_str)","getallheaders()","virtual(string filename)","array_change_key_case(array input [, int case])","array_chunk(array input, int size [, bool preserve_keys])","array_combine(array keys, array values)","array_count_values(array input)","array_diff_assoc(array array1, array array2 [, array ...])","array_diff_uassoc(array array1, array array2 [, array ..., callback key_compare_func])","array_diff(array array1, array array2 [, array ...])","array_fill(int start_index, int num, mixed value)","array_filter(array input [, callback callback])","array_flip(array trans)","array_intersect_assoc(array array1, array array2 [, array ...])","array_intersect(array array1, array array2 [, array ...])","array_key_exists(mixed key, array search)","array_keys(array input [, mixed search_value])","array_map(mixed callback, array arr1 [, array ...])","array_merge_recursive(array array1, array array2 [, array ...])","array_merge(array array1, array array2 [, array ...])","array_multisort(array ar1 [, mixed arg [, mixed ... [, array ...]]])","array_pad(array input, int pad_size, mixed pad_value)","array_pop(array array)","array_push(array array, mixed var [, mixed ...])","array_rand(array input [, int num_req])","array_reduce(array input, callback function [, int initial])","array_reverse(array array [, bool preserve_keys])","array_search(mixed needle, array haystack [, bool strict])","array_shift(array array)","array_slice(array array, int offset [, int length])","array_splice(array input, int offset [, int length [, array replacement]])","array_sum(array array)","array_udiff_assoc(array array1, array array2 [, array ..., callback data_compare_func])","array_udiff_uassoc(array array1, array array2 [, array ..., callback data_compare_func, callback key_compare_func])","array_udiff(array array1, array array2 [, array ..., callback data_compare_func])","array_unique(array array)","array_unshift(array array, mixed var [, mixed ...])","array_values(array input)","array_walk(array arr, string func, mixed userdata)","array_walk_recursive()","array([mixed ...])","arsort(array array [, int sort_flags])","asort(array array [, int sort_flags])","compact(mixed varname [, mixed ...])","count(mixed var)","current(array array)","each(array array)","end(array array)","extract(array var_array [, int extract_type [, string prefix]])","in_array(mixed needle, array haystack, bool strict)","key(array array)","krsort(array array [, int sort_flags])","ksort(array array [, int sort_flags])","list(mixed ...)","natcasesort(array array)","natsort(array array)","next(array array)","pos(array array)","prev(array array)","range(int low, int high)","reset(array array)","rsort(array array [, int sort_flags])","shuffle(array array)","sizeof(array array)","sort(array array [, int sort_flags])","uasort(array array, function cmp_function)","uksort(array array, function cmp_function)","usort(array array, string cmp_function)","aspell_check_raw(int dictionary_link, string word)","aspell_check(int dictionary_link, string word)","aspell_new(string master, string personal)","aspell_suggest(int dictionary_link, string word)","bcadd(string left operand, string right operand [, int scale])","bccomp(string left operand, string right operand [, int scale])","bcdiv(string left operand, string right operand [, int scale])","bcmod(string left operand, string modulus)","bcmul(string left operand, string right operand [, int scale])","bcpow(string x, string y [, int scale])","bcpowmod(string x, string y, string modulus [, int scale])","bcscale(int scale)","bcsqrt(string operand, int scale)","bcsub(string left operand, string right operand [, int scale])","bzclose(resource bz)","bzcompress(string source [, int blocksize [, int workfactor]])","bzdecompress(string source [, int small])","bzerrno(resource bz)","bzerror(resource bz)","bzerrstr(resource bz)","bzflush(resource bz)","bzopen(string filename, string mode)","bzread(resource bz [, int length])","bzwrite(resource bz, string data [, int length])","cal_days_in_month(int calendar, int month, int year)","cal_from_jd(int jd, int calendar)","cal_info([int calendar])","cal_to_jd(int calendar, int month, int day, int year)","easter_date(int year)","easter_days(int year)","frenchtojd(int month, int day, int year)","gregoriantojd(int month, int day, int year)","jddayofweek(int julianday, int mode)","jdmonthname(int julianday, int mode)","jdtofrench(int juliandaycount)","jdtogregorian(int julianday)","jdtojewish(int julianday)","jdtojulian(int julianday)","jdtounix(int jday)","jewishtojd(int month, int day, int year)","juliantojd(int month, int day, int year)","unixtojd([int timestamp])","ccvs_add(string session, string invoice, string argtype, string argval)","ccvs_auth(string session, string invoice)","ccvs_command(string session, string type, string argval)","ccvs_count(string session, string type)","ccvs_delete(string session, string invoice)","ccvs_done(string sess)","ccvs_init(string name)","ccvs_lookup(string session, string invoice, int inum)","ccvs_new(string session, string invoice)","ccvs_report(string session, string type)","ccvs_return(string session, string invoice)","ccvs_reverse(string session, string invoice)","ccvs_sale(string session, string invoice)","ccvs_status(string session, string invoice)","ccvs_textvalue(string session)","ccvs_void(string session, string invoice)","COM","COM(string module_name [, string server_name [, int codepage]])","VARIANT","VARIANT([mixed value [, int type [, int codepage]]])","com_addref()","com_get(resource com_object, string property)","com_invoke(resource com_object, string function_name [, mixed parametry funkce, ...])","com_isenum(object com_module)","com_load_typelib(string typelib_name [, int case_insensitive])","com_load(string module name [, string server name])","com_propget(resource com_object, string property)","com_propput(resource com_object, string property, mixed value)","com_propset(resource com_object, string property, mixed value)","com_release()","com_set(resource com_object, string property, mixed value)","call_user_method_array(string method_name, object obj [, array paramarr])","call_user_method(string method_name, object obj [, mixed parameter [, mixed ...]])","class_exists(string class_name)","get_class_methods(string class_name)","get_class_vars(string class_name)","get_class(object obj)","get_declared_classes()","get_object_vars(object obj)","get_parent_class(object obj)","is_a(object object, string class_name)","is_subclass_of(object obj, string superclass)","method_exists(object object, string method_name)","cpdf_add_annotation(int pdf_document, float llx, float lly, float urx, float ury, string title, string content [, int mode])","cpdf_add_outline(int pdf_document, int lastoutline, int sublevel, int open, int pagenr, string text)","cpdf_arc(int pdf_document, float x-coor, float y-coor, float radius, float start, float end [, int mode])","cpdf_begin_text(int pdf_document)","cpdf_circle(int pdf_document, float x-coor, float y-coor, float radius [, int mode])","cpdf_clip(int pdf_document)","cpdf_close(int pdf_document)","cpdf_closepath_fill_stroke(int pdf_document)","cpdf_closepath_stroke(int pdf_document)","cpdf_closepath(int pdf_document)","cpdf_continue_text(int pdf_document, string text)","cpdf_curveto(int pdf_document, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])","cpdf_end_text(int pdf_document)","cpdf_fill_stroke(int pdf_document)","cpdf_fill(int pdf_document)","cpdf_finalize_page(int pdf_document, int page_number)","cpdf_finalize(int pdf_document)","cpdf_global_set_document_limits(int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects)","cpdf_import_jpeg(int pdf_document, string file_name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale, int gsave [, int mode])","cpdf_lineto(int pdf_document, float x-coor, float y-coor [, int mode])","cpdf_moveto(int pdf_document, float x-coor, float y-coor [, int mode])","cpdf_newpath(int pdf_document)","cpdf_open(int compression [, string filename])","cpdf_output_buffer(int pdf_document)","cpdf_page_init(int pdf_document, int page_number, int orientation, float height, float width [, float unit])","cpdf_place_inline_image(int pdf_document, int image, float x-coor, float y-coor, float angle, float width, float height [, int mode])","cpdf_rect(int pdf_document, float x-coor, float y-coor, float width, float height [, int mode])","cpdf_restore(int pdf_document)","cpdf_rlineto(int pdf_document, float x-coor, float y-coor [, int mode])","cpdf_rmoveto(int pdf_document, float x-coor, float y-coor [, int mode])","cpdf_rotate_text(int pdfdoc, float angle)","cpdf_rotate(int pdf_document, float angle)","cpdf_save_to_file(int pdf_document, string filename)","cpdf_save(int pdf_document)","cpdf_scale(int pdf_document, float x-scale, float y-scale)","cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])","cpdf_set_char_spacing(int pdf_document, float space)","cpdf_set_creator(string creator)","cpdf_set_current_page(int pdf_document, int page_number)","cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)","cpdf_set_font_map_file(int pdfdoc, string filename)","cpdf_set_font(int pdf_document, string font_name, float size, string encoding)","cpdf_set_horiz_scaling(int pdf_document, float scale)","cpdf_set_keywords(string keywords)","cpdf_set_leading(int pdf_document, float distance)","cpdf_set_page_animation(int pdf_document, int transition, float duration)","cpdf_set_subject(int pdf_document, string subject)","cpdf_set_text_matrix(int pdf_document, array matrix)","cpdf_set_text_pos(int pdf_document, float x-coor, float y-coor [, int mode])","cpdf_set_text_rendering(int pdf_document, int rendermode)","cpdf_set_text_rise(int pdf_document, float value)","cpdf_set_title(string title)","cpdf_set_viewer_preferences(int pdfdoc, array preferences)","cpdf_set_word_spacing(int pdf_document, float space)","cpdf_setdash(int pdf_document, float white, float black)","cpdf_setflat(int pdf_document, float value)","cpdf_setgray_fill(int pdf_document, float value)","cpdf_setgray_stroke(int pdf_document, float gray_value)","cpdf_setgray(int pdf_document, float gray_value)","cpdf_setlinecap(int pdf_document, int value)","cpdf_setlinejoin(int pdf_document, int value)","cpdf_setlinewidth(int pdf_document, float width)","cpdf_setmiterlimit(int pdf_document, float value)","cpdf_setrgbcolor_fill(int pdf_document, float red_value, float green_value, float blue_value)","cpdf_setrgbcolor_stroke(int pdf_document, float red_value, float green_value, float blue_value)","cpdf_setrgbcolor(int pdf_document, float red_value, float green_value, float blue_value)","cpdf_show_xy(int pdf_document, string text, float x-coor, float y-coor [, int mode])","cpdf_show(int pdf_document, string text)","cpdf_stringwidth(int pdf_document, string text)","cpdf_stroke(int pdf_document)","cpdf_text(int pdf_document, string text, float x-coor, float y-coor [, int mode [, float orientation [, int alignmode]]])","cpdf_translate(int pdf_document, float x-coor, float y-coor [, int mode])","crack_check([resource dictionary, string password])","crack_closedict([resource dictionary])","crack_getlastmessage()","crack_opendict(string dictionary)","curl_close(int ch)","curl_errno(resource ch)","curl_error(resource ch)","curl_exec(int ch)","curl_getinfo(resource ch [, int opt])","curl_init([string url])","curl_multi_add_handle(resource mh, resource ch)","curl_multi_close(resource mh)","curl_multi_exec(resource mh)","curl_multi_getcontent(resource ch)","curl_multi_info_read(resource mh)","curl_multi_init()","curl_multi_remove_handle(resource mh, resource ch)","curl_multi_select(resource mh [, float timeout])","curl_setopt(int ch, string option, mixed value)","curl_version()","cybercash_base64_decode(string inbuff)","cybercash_base64_encode(string inbuff)","cybercash_decr(string wmk, string sk, string inbuff)","cybercash_encr(string wmk, string sk, string inbuff)","cyrus_authenticate(resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]])","cyrus_bind(resource connection, array callbacks)","cyrus_close(resource connection)","cyrus_connect([string host [, string port [, int flags]]])","cyrus_query(resource connection, string query)","cyrus_unbind(resource connection, string trigger_name)","ctype_alnum(string text)","ctype_alpha(string text)","ctype_cntrl(string text)","ctype_digit(string text)","ctype_graph(string text)","ctype_lower(string text)","ctype_print(string text)","ctype_punct(string text)","ctype_space(string text)","ctype_upper(string text)","ctype_xdigit(string text)","dba_close(resource handle)","dba_delete(string key, resource handle)","dba_exists(string key, resource handle)","dba_fetch(string key, resource handle)","dba_fetch(string key, int skip, resource handle)","dba_firstkey(resource handle)","dba_handlers()","dba_insert(string key, string value, resource handle)","dba_key_split(mixed key)","dba_list()","dba_nextkey(resource handle)","dba_open(string path, string mode, string handler [, ...])","dba_optimize(resource handle)","dba_popen(string path, string mode, string handler [, ...])","dba_replace(string key, string value, resource handle)","dba_sync(resource handle)","checkdate(int month, int day, int year)","date(string format [, int timestamp])","getdate([int timestamp])","gettimeofday()","gmdate(string format [, int timestamp])","gmmktime(int hour, int minute, int second, int month, int day, int year [, int is_dst])","gmstrftime(string format [, int timestamp])","localtime([int timestamp [, bool is_associative]])","microtime()","mktime(int hour, int minute, int second, int month, int day, int year [, int is_dst])","strftime(string format [, int timestamp])","strtotime(string time [, int now])","time()","dbase_add_record(int dbase_identifier, array record)","dbase_close(int dbase_identifier)","dbase_create(string filename, array fields)","dbase_delete_record(int dbase_identifier, int record)","dbase_get_header_info(int dbase_identifier)","dbase_get_record_with_names(int dbase_identifier, int record)","dbase_get_record(int dbase_identifier, int record)","dbase_numfields(int dbase_identifier)","dbase_numrecords(int dbase_identifier)","dbase_open(string filename, int flags)","dbase_pack(int dbase_identifier)","dbase_replace_record(int dbase_identifier, array record, int dbase_record_number)","dblist()","dbmclose(int dbm_identifier)","dbmdelete(int dbm_identifier, string key)","dbmexists(int dbm_identifier, string key)","dbmfetch(int dbm_identifier, string key)","dbmfirstkey(int dbm_identifier)","dbminsert(int dbm_identifier, string key, string value)","dbmnextkey(int dbm_identifier, string key)","dbmopen(string filename, string flags)","dbmreplace(int dbm_identifier, string key, string value)","dbx_close(object link_identifier)","dbx_compare(array row_a, array row_b, string column_key [, int flags])","dbx_connect(mixed module, string host, string database, string username, string password [, int persistent])","dbx_error(object link_identifier)","dbx_escape_string(object link_identifier, string text)","dbx_fetch_row(object result_identifier)","dbx_query(object link_identifier, string sql_statement [, int flags])","dbx_sort(object result, string user_compare_function)","dbplus_add(resource relation, array tuple)","dbplus_aql(string query [, string server [, string dbpath]])","dbplus_chdir([string newdir])","dbplus_close(resource relation)","dbplus_curr(resource relation, array tuple)","dbplus_errcode(int errno)","dbplus_errno()","dbplus_find(resource relation, array constraints, mixed tuple)","dbplus_first(resource relation, array tuple)","dbplus_flush(resource relation)","dbplus_freealllocks()","dbplus_freelock(resource relation, string tname)","dbplus_freerlocks(resource relation)","dbplus_getlock(resource relation, string tname)","dbplus_getunique(resource relation, int uniqueid)","dbplus_info(resource relation, string key, array)","dbplus_last(resource relation, array tuple)","dbplus_lockrel(resource relation)","dbplus_next(resource relation, array)","dbplus_open(string name)","dbplus_prev(resource relation, array tuple)","dbplus_rchperm(resource relation, int mask, string user, string group)","dbplus_rcreate(string name, mixed domlist [, bool overwrite])","dbplus_rcrtexact(string name, resource relation, bool overwrite)","dbplus_rcrtlike(string name, resource relation, int flag)","dbplus_resolve(string relation_name)","dbplus_restorepos(resource relation, array tuple)","dbplus_rkeys(resource relation, mixed domlist)","dbplus_ropen(string name)","dbplus_rquery(string query, string dbpath)","dbplus_rrename(resource relation, string name)","dbplus_rsecindex(resource relation, mixed domlist, int type)","dbplus_runlink(resource relation)","dbplus_rzap(resource relation)","dbplus_savepos(resource relation)","dbplus_setindex(resource relation, string idx_name)","dbplus_setindexbynumber(resource relation, int idx_number)","dbplus_sql(string query, string server, string dbpath)","dbplus_tcl(int sid, string script)","dbplus_tremove(resource relation, array tuple [, array current])","dbplus_undo(resource relation)","dbplus_undoprepare(resource relation)","dbplus_unlockrel(resource relation)","dbplus_unselect(resource relation)","dbplus_update(resource relation, array old, array new)","dbplus_xlockrel(resource relation)","dbplus_xunlockrel(resource relation)","dio_close(resource fd)","dio_fcntl(resource fd, int cmd [, mixed arg])","dio_open(string filename, int flags [, int mode])","dio_read(resource fd [, int n])","dio_seek(resource fd, int pos, int whence)","dio_stat(resource fd)","dio_tcsetattr(resource fd, array options)","dio_truncate(resource fd, int offset)","dio_write(resource fd, string data [, int len])","chdir(string directory)","chroot(string directory)","class","dir","dir(string directory)","string","read()","void","rewind()","close()","closedir(int dir_handle)","getcwd()","opendir(string path)","readdir(int dir_handle)","rewinddir(int dir_handle)","scandir(string directory [, int sorting_order])","DomNode","DomAttribute","name()","specified()","value()","DomCData","DomComment","DomDocument","add_root(string name)","create_attribute(string name, string value)","create_cdata_section(string content)","create_comment(string content)","create_element_ns(string uri, string name [, string prefix])","create_element(string name)","create_entity_reference(string content)","create_processing_instruction(string content)","create_text_node(string content)","doctype()","document_element()","dump_file(string filename [, bool compressionmode [, bool format]])","dump_mem([bool format [, string encoding]])","get_element_by_id(string id)","get_elements_by_tagname(string name)","html_dump_mem()","xinclude()","DomDocumentType","entities()","internal_subset()","notations()","public_id()","system_id()","DomElement","get_attribute_node(object attr)","get_attribute(string name)","has_attribute(string name)","remove_attribute(string name)","set_attribute(string name, string value)","tagname()","DomEntity","DomEntityReference","DomProcessingInstruction","data()","target()","add_namespace(string uri, string prefix)","append_child(object newnode)","append_sibling(object newnode)","attributes()","child_nodes()","clone_node()","dump_node()","first_child()","get_content()","has_attributes()","has_child_nodes()","insert_before(object newnode, object refnode)","is_blank_node()","last_child()","next_sibling()","node_name()","node_type()","node_value()","owner_document()","parent_node()","prefix()","previous_sibling()","remove_child(object oldchild)","replace_child(object oldnode, object newnode)","replace_node(object newnode)","set_content()","set_name()","set_namespace(string uri [, string prefix])","unlink_node()","DomXsltStylesheet","process(object DomDocument [, array xslt_parameters [, bool param_is_xpath]])","result_dump_file(object DomDocument, string filename)","result_dump_mem(object DomDocument)","domxml_new_doc(string version)","domxml_open_file(string filename)","domxml_open_mem(string str)","domxml_version()","domxml_xmltree(string str)","domxml_xslt_stylesheet_doc(object DocDocument Object)","domxml_xslt_stylesheet_file(string xsl file)","domxml_xslt_stylesheet(string xsl document)","xpath_eval_expression(object xpath_context)","xpath_eval(object xpath context, string xpath expression [, object contextnode])","xpath_new_context(object dom document)","xptr_eval([object xpath_context, string eval_str])","xptr_new_context([object doc_handle])","dotnet_load(string assembly_name [, string datatype_name [, int codepage]])","debug_backtrace()","debug_print_backtrace()","error_log(string message [, int message_type [, string destination [, string extra_headers]]])","error_reporting([int level])","restore_error_handler()","set_error_handler(callback error_handler)","trigger_error(string error_msg [, int error_type])","fam_cancel_monitor(resource fam, resource fam_monitor)","fam_close(resource fam)","fam_monitor_collection(resource fam, string dirname, int depth, string mask)","fam_monitor_directory(resource fam, string dirname)","fam_monitor_file(resource fam, string filename)","fam_next_event(resource fam)","fam_open([string appname])","fam_pending(resource fam)","fam_resume_monitor(resource fam, resource fam_monitor)","fam_suspend_monitor(resource fam, resource fam_monitor)","fbsql_affected_rows([resource link_identifier])","fbsql_autocommit(resource link_identifier [, bool OnOff])","fbsql_change_user(string user, string password [, string database [, resource link_identifier]])","fbsql_close([resource link_identifier])","fbsql_commit([resource link_identifier])","fbsql_connect([string hostname [, string username [, string password]]])","fbsql_create_blob(string blob_data [, resource link_identifier])","fbsql_create_clob(string clob_data [, resource link_identifier])","fbsql_create_db(string database_name [, resource link_identifier])","fbsql_data_seek(resource result_identifier, int row_number)","fbsql_database_password(resource link_identifier [, string database_password])","fbsql_database(resource link_identifier [, string database])","fbsql_db_query(string database, string query [, resource link_identifier])","fbsql_db_status(string database_name [, resource link_identifier])","fbsql_drop_db(string database_name [, resource link_identifier])","fbsql_errno([resource link_identifier])","fbsql_error([resource link_identifier])","fbsql_fetch_array(resource result [, int result_type])","fbsql_fetch_assoc(resource result)","fbsql_fetch_field(resource result [, int field_offset])","fbsql_fetch_lengths([resource result])","fbsql_fetch_object(resource result [, int result_type])","fbsql_fetch_row(resource result)","fbsql_field_flags(resource result, int field_offset)","fbsql_field_len(resource result, int field_offset)","fbsql_field_name(resource result, int field_index)","fbsql_field_seek(resource result, int field_offset)","fbsql_field_table(resource result, int field_offset)","fbsql_field_type(resource result, int field_offset)","fbsql_free_result(resource result)","fbsql_get_autostart_info([resource link_identifier])","fbsql_hostname(resource link_identifier [, string host_name])","fbsql_insert_id([resource link_identifier])","fbsql_list_dbs([resource link_identifier])","fbsql_list_fields(string database_name, string table_name [, resource link_identifier])","fbsql_list_tables(string database [, resource link_identifier])","fbsql_next_result(resource result_id)","fbsql_num_fields(resource result)","fbsql_num_rows(resource result)","fbsql_password(resource link_identifier [, string password])","fbsql_pconnect([string hostname [, string username [, string password]]])","fbsql_query(string query [, resource link_identifier])","fbsql_read_blob(string blob_handle [, resource link_identifier])","fbsql_read_clob(string clob_handle [, resource link_identifier])","fbsql_result(resource result, int row [, mixed field])","fbsql_rollback([resource link_identifier])","fbsql_select_db(string database_name [, resource link_identifier])","fbsql_set_lob_mode(resource result, string database_name)","fbsql_set_transaction(resource link_identifier, int Locking, int Isolation)","fbsql_start_db(string database_name [, resource link_identifier])","fbsql_stop_db(string database_name [, resource link_identifier])","fbsql_tablename(resource result, int i)","fbsql_username(resource link_identifier [, string username])","fbsql_warnings([bool OnOff])","fbsql_set_password(unknown)","filepro_fieldcount()","filepro_fieldname(int field_number)","filepro_fieldtype(int field_number)","filepro_fieldwidth(int field_number)","filepro_retrieve(int row_number, int field_number)","filepro_rowcount()","filepro(string directory)","basename(string path)","chgrp(string filename, mixed group)","chmod(string filename, int mode)","chown(string filename, mixed user)","clearstatcache()","copy(string source, string dest)","delete(string file)","dirname(string path)","disk_free_space(string directory)","disk_total_space(string directory)","diskfreespace(string directory)","fclose(int fp)","feof(int fp)","fflush(int fp)","fgetc(int fp)","fgetcsv(int fp, int length [, string delimiter])","fgets(int fp [, int length])","fgetss(int fp, int length [, string allowable_tags])","file_exists(string filename)","file_get_contents(string filename [, int use_include_path [, resource context]])","file_put_contents(string filename, string data [, int flags [, resource context]])","file(string filename [, int use_include_path])","fileatime(string filename)","filectime(string filename)","filegroup(string filename)","fileinode(string filename)","filemtime(string filename)","fileowner(string filename)","fileperms(string filename)","filesize(string filename)","filetype(string filename)","flock(int fp, int operation [, int wouldblock])","fnmatch(string pattern, string string [, int flags])","fopen(string filename, string mode [, int use_include_path])","fpassthru(int fp)","fputs(int fp, string str [, int length])","fread(int fp, int length)","fscanf(int handle, string format [, string var1])","fseek(int fp, int offset [, int whence])","fstat(int fp)","ftell(int fp)","ftruncate(int fp, int size)","fwrite(int fp, string string [, int length])","glob(string pattern [, int flags])","is_dir(string filename)","is_executable(string filename)","is_file(string filename)","is_link(string filename)","is_readable(string filename)","is_uploaded_file(string filename)","is_writable(string filename)","link(string target, string link)","linkinfo(string path)","lstat(string filename)","mkdir(string pathname, int mode)","move_uploaded_file(string filename, string destination)","parse_ini_file(string filename [, bool process_sections])","pathinfo(string path)","pclose(int fp)","popen(string command, string mode)","readfile(string filename [, int use_include_path])","readlink(string path)","realpath(string path)","rename(string oldname, string newname)","rewind(int fp)","rmdir(string dirname)","set_file_buffer(int fp, int buffer)","stat(string filename)","symlink(string target, string link)","tempnam(string dir, string prefix)","tmpfile()","touch(string filename [, int time])","umask(int mask)","unlink(string filename)","fdf_add_doc_javascript(resource fdfdoc, string script_name, string script_code)","fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)","fdf_close(resource fdf_document)","fdf_create()","fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])","fdf_errno()","fdf_error([int error_code])","fdf_get_ap(resource fdf_document, string field, int face, string filename)","fdf_get_attachment(resource fdf_document, string fieldname, string savepath)","fdf_get_encoding(resource fdf_document)","fdf_get_file(resource fdf_document)","fdf_get_flags()","fdf_get_opt(resource fdfdof, string fieldname [, int element])","fdf_get_status(resource fdf_document)","fdf_get_value(resource fdf_document, string fieldname [, int which])","fdf_get_version([resource fdf_document])","fdf_header()","fdf_next_field_name(resource fdf_document [, string fieldname])","fdf_open_string(string fdf_data)","fdf_open(string filename)","fdf_remove_item(resource fdfdoc, string fieldname, int item)","fdf_save_string(resource fdf_document)","fdf_save(resource fdf_document [, string filename])","fdf_set_ap(resource fdf_document, string field_name, int face, string filename, int page_number)","fdf_set_encoding(resource fdf_document, string encoding)","fdf_set_file(resource fdf_document, string url [, string target_frame])","fdf_set_flags(resource fdf_document, string fieldname, int whichFlags, int newFlags)","fdf_set_javascript_action(resource fdf_document, string fieldname, int trigger, string script)","fdf_set_opt(resource fdf_document, string fieldname, int element, string str1, string str2)","fdf_set_status(resource fdf_document, string status)","fdf_set_submit_form_action(resource fdf_document, string fieldname, int trigger, string script, int flags)","fdf_set_target_frame(resource fdf_document, string frame_name)","fdf_set_value(resource fdf_document, string fieldname, mixed value [, int isName])","fdf_set_version(resource fdf_document, string version)","fribidi_log2vis(string str, string direction, int charset)","ftp_alloc(resource ftp_stream, int filesize [, string&result])","ftp_cdup(resource ftp_stream)","ftp_chdir(resource ftp_stream, string directory)","ftp_chmod(resource ftp_stream, int mode, string filename)","ftp_close(resource ftp_stream)","ftp_connect(string host [, int port [, int timeout]])","ftp_delete(resource ftp_stream, string path)","ftp_exec(resource ftp_stream, string command)","ftp_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos])","ftp_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos])","ftp_get_option(resource ftp_stream, int option)","ftp_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos])","ftp_login(resource ftp_stream, string username, string password)","ftp_mdtm(resource ftp_stream, string remote_file)","ftp_mkdir(resource ftp_stream, string directory)","ftp_nb_continue(resource ftp_stream)","ftp_nb_fget(resource ftp_stream, resource handle, string remote_file, int mode [, int resumepos])","ftp_nb_fput(resource ftp_stream, string remote_file, resource handle, int mode [, int startpos])","ftp_nb_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos])","ftp_nb_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos])","ftp_nlist(resource ftp_stream, string directory)","ftp_pasv(resource ftp_stream, bool pasv)","ftp_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos])","ftp_pwd(resource ftp_stream)","ftp_raw(resource ftp_stream, string command)","ftp_rawlist(resource ftp_stream, string directory)","ftp_rename(resource ftp_stream, string from, string to)","ftp_rmdir(resource ftp_stream, string directory)","ftp_set_option(resource ftp_stream, int option, mixed value)","ftp_site(resource ftp_stream, string cmd)","ftp_size(resource ftp_stream, string remote_file)","ftp_ssl_connect(string host [, int port [, int timeout]])","ftp_systype(resource ftp_stream)","call_user_func_array(callback function [, array param_arr])","call_user_func(string function_name [, mixed parameter [, mixed ...]])","create_function(string args, string code)","func_get_arg(int arg_num)","func_get_args()","func_num_args()","function_exists(string function_name)","get_defined_functions()","get_declared_interfaces(unknown)","get_headers(unknown)","register_shutdown_function(string func)","register_tick_function(callback function [, mixed arg])","unregister_tick_function(string function_name)","bind_textdomain_codeset(string domain, string codeset)","bindtextdomain(string domain, string directory)","dcgettext(string domain, string message, int category)","dcngettext(string domain, string msgid1, string msgid2, int n, int category)","dgettext(string domain, string message)","dngettext(string domain, string msgid1, string msgid2, int n)","gettext(string message)","ngettext(string msgid1, string msgid2, int n)","textdomain(string text_domain)","gmp_abs(resource a)","gmp_add(resource a, resource b)","gmp_and(resource a, resource b)","gmp_clrbit(resource&a, int index)","gmp_cmp(resource a, resource b)","gmp_com(resource a)","gmp_div_q(resource a, resource b [, int round])","gmp_div_qr(resource n, resource d [, int round])","gmp_div_r(resource n, resource d [, int round])","gmp_divexact(resource n, resource d)","gmp_fact(int a)","gmp_gcd(resource a, resource b)","gmp_gcdext(resource a, resource b)","gmp_hamdist(resource a, resource b)","gmp_init(mixed number)","gmp_intval(resource gmpnumber)","gmp_invert(resource a, resource b)","gmp_jacobi(resource a, resource p)","gmp_legendre(resource a, resource p)","gmp_mod(resource n, resource d)","gmp_mul(resource a, resource b)","gmp_neg(resource a)","gmp_or(resource a, resource b)","gmp_perfect_square(resource a)","gmp_popcount(resource a)","gmp_pow(resource base, int exp)","gmp_powm(resource base, resource exp, resource mod)","gmp_prob_prime(resource a [, int reps])","gmp_random(int limiter)","gmp_scan0(resource a, int start)","gmp_scan1(resource a, int start)","gmp_setbit(resource&a, int index [, bool set_clear])","gmp_sign(resource a)","gmp_sqrt(resource a)","gmp_sqrtrm(resource a)","gmp_strval(resource gmpnumber [, int base])","gmp_sub(resource a, resource b)","gmp_xor(resource a, resource b)","header(string string [, bool replace [, int http_response_code]])","headers_list()","headers_sent()","setcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]])","setrawcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]])","hw_array2objrec(array object_array)","hw_changeobject(int link, int objid, array attributes)","hw_children(int connection, int objectID)","hw_childrenobj(int connection, int objectID)","hw_close(int connection)","hw_connect(string host, int port, string username, string password)","hw_connection_info(int link)","hw_cp(int connection, array object_id_array, int destination_id)","hw_deleteobject(int connection, int object_to_delete)","hw_docbyanchor(int connection, int anchorID)","hw_docbyanchorobj(int connection, int anchorID)","hw_document_attributes(int hw_document)","hw_document_bodytag(int hw_document)","hw_document_content(int hw_document)","hw_document_setcontent(int hw_document, string content)","hw_document_size(int hw_document)","hw_dummy(int link, int id, int msgid)","hw_edittext(int connection, int hw_document)","hw_error(int connection)","hw_errormsg(int connection)","hw_free_document(int hw_document)","hw_getanchors(int connection, int objectID)","hw_getanchorsobj(int connection, int objectID)","hw_getandlock(int connection, int objectID)","hw_getchildcoll(int connection, int objectID)","hw_getchildcollobj(int connection, int objectID)","hw_getchilddoccoll(int connection, int objectID)","hw_getchilddoccollobj(int connection, int objectID)","hw_getobject(int connection, mixed objectID, string query)","hw_getobjectbyquery(int connection, string query, int max_hits)","hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits)","hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits)","hw_getobjectbyqueryobj(int connection, string query, int max_hits)","hw_getparents(int connection, int objectID)","hw_getparentsobj(int connection, int objectID)","hw_getrellink(int link, int rootid, int sourceid, int destid)","hw_getremote(int connection, int objectID)","hw_getremotechildren(int connection, string object_record)","hw_getsrcbydestobj(int connection, int objectID)","hw_gettext(int connection, int objectID [, mixed rootID/prefix])","hw_getusername(int connection)","hw_identify(string username, string password)","hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections)","hw_info(int connection)","hw_inscoll(int connection, int objectID, array object_array)","hw_insdoc(int connection, int parentID, string object_record, string text)","hw_insertanchors(int hwdoc, array anchorecs, array dest [, array urlprefixes])","hw_insertdocument(int connection, int parent_id, int hw_document)","hw_insertobject(int connection, string object_rec, string parameter)","hw_mapid(int connection, int server_id, int object_id)","hw_modifyobject(int connection, int object_to_change, array remove, array add, int mode)","hw_mv(int connection, array object_id_array, int source_id, int destination_id)","hw_new_document(string object_record, string document_data, int document_size)","hw_objrec2array(string object_record [, array format])","hw_output_document(int hw_document)","hw_pconnect(string host, int port, string username, string password)","hw_pipedocument(int connection, int objectID)","hw_root()","hw_setlinkroot(int link, int rootid)","hw_stat(int link)","hw_unlock(int connection, int objectID)","hw_who(int connection)","key()","langdepvalue(string language)","values()","attribute([string name [, string value]])","checkin(array parameter)","checkout(array parameter)","children(array parameter)","mimetype()","read(string buffer, integer len)","content(array parameter)","copy(array parameter)","dbstat(array parameter)","dcstat(array parameter)","dstanchors(array parameter)","dstofsrcanchors(array parameter)","count()","reason()","find(array parameter)","ftstat(array parameter)","hwapi_hgcsp(string hostname [, int port])","hwstat(array parameter)","identify(array parameter)","info(array parameter)","insert(array parameter)","insertanchor(array parameter)","insertcollection(array parameter)","insertdocument(array parameter)","link(array parameter)","lock(array parameter)","move(array parameter)","content(string content, string mimetype)","assign(array parameter)","attreditable(array parameter)","count(array parameter)","insert(object attribute)","hw_api_object(array parameter)","remove(string name)","title(array parameter)","value(string name)","HW_API","object(array parameter)","objectbyanchor(array parameter)","parents(array parameter)","remove(array parameter)","replace(array parameter)","setcommitedversion(array parameter)","srcanchors(array parameter)","srcsofdst(array parameter)","unlock(array parameter)","user(array parameter)","userlist(array parameter)","HW_API_Object","HW_API_Attribute","HW_API_Error","HW_API_Content","HW_API_Reason","description()","type()","iconv_get_encoding([string type])","iconv_mime_decode(string encoded_string [, string charset])","iconv_mime_encode(string field_name, string field_value [, array preference])","iconv_mime_decode_headers(string encoded_headers [, int mode [, string charset]])","iconv_set_encoding(string type, string charset)","iconv_strlen(string str [, string charset])","iconv_strpos(string haystack, string needle, int offset [, string charset])","iconv_strrpos(string haystack, string needle [, string charset])","iconv_substr(string str, int offset [, int length [, string charset]])","iconv(string in_charset, string out_charset, string str)","idate(unknown)","ob_iconv_handler(string contents, int status)","exif_imagetype(string filename)","exif_read_data(string filename [, string sections [, bool arrays [, bool thumbnail]]])","exif_thumbnail(string filename [, int&width [, int&height [, int&imagetype]]])","gd_info()","getimagesize(string filename [, array imageinfo])","imagefilter(unknown)","image_type_to_extension(unknown)","image_type_to_mime_type(int imagetype)","image2wbmp(resource image [, string filename [, int threshold]])","imagealphablending(resource image, bool blendmode)","imageantialias(resource im, bool on)","imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int color)","imagechar(resource image, int font, int x, int y, string c, int color)","imagecharup(resource image, int font, int x, int y, string c, int color)","imagecolorallocate(resource image, int red, int green, int blue)","imagecolorallocatealpha(resource image, int red, int green, int blue, int alpha)","imagecolorat(resource image, int x, int y)","imagecolorclosest(resource image, int red, int green, int blue)","imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha)","imagecolorclosesthwb(resource image, int red, int green, int blue)","imagecolordeallocate(resource image, int color)","imagecolorexact(resource image, int red, int green, int blue)","imagecolorexactalpha(resource image, int red, int green, int blue, int alpha)","imagecolormatch(resource image1, resource image2)","imagecolorresolve(resource image, int red, int green, int blue)","imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha)","imagecolorset(resource image, int index, int red, int green, int blue)","imagecolorsforindex(resource image, int index)","imagecolorstotal(resource image)","imagecolortransparent(resource image [, int color])","imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)","imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)","imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)","imagecopyresampled(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)","imagecopyresized(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)","imagecreate(int x_size, int y_size)","imagecreatefromgd2(string filename)","imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)","imagecreatefromgd(string filename)","imagecreatefromgif(string filename)","imagecreatefromjpeg(string filename)","imagecreatefrompng(string filename)","imagecreatefromstring(string image)","imagecreatefromwbmp(string filename)","imagecreatefromxbm(string filename)","imagecreatefromxpm(string filename)","imagecreatetruecolor(int x_size, int y_size)","imagedashedline(resource image, int x1, int y1, int x2, int y2, int color)","imagedestroy(resource image)","imageellipse(resource image, int cx, int cy, int w, int h, int color)","imagefill(resource image, int x, int y, int color)","imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int color, int style)","imagefilledellipse(resource image, int cx, int cy, int w, int h, int color)","imagefilledpolygon(resource image, array points, int num_points, int color)","imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color)","imagefilltoborder(resource image, int x, int y, int border, int color)","imagefontheight(int font)","imagefontwidth(int font)","imageftbbox(int size, int angle, string font_file, string text [, array extrainfo])","imagefttext(resource image, int size, int angle, int x, int y, int col, string font_file, string text [, array extrainfo])","imagegammacorrect(resource image, float inputgamma, float outputgamma)","imagegd2(resource image [, string filename [, int chunk_size [, int type]]])","imagegd(resource image [, string filename])","imagegif(resource image [, string filename])","imageinterlace(resource image [, int interlace])","imageistruecolor(resource image)","imagejpeg(resource image [, string filename [, int quality]])","imageline(resource image, int x1, int y1, int x2, int y2, int color)","imageloadfont(string file)","imagepalettecopy(resource destination, resource source)","imagepng(resource image [, string filename])","imagepolygon(resource image, array points, int num_points, int color)","imagepsbbox(string text, int font, int size [, int space [, int tightness [, float angle]]])","imagepscopyfont(int fontindex)","imagepsencodefont(int font_index, string encodingfile)","imagepsextendfont(int font_index, float extend)","imagepsfreefont(int fontindex)","imagepsloadfont(string filename)","imagepsslantfont(int font_index, float slant)","imagepstext(resource image, string text, int font, int size, int foreground, int background, int x, int y [, int space [, int tightness [, float angle [, int antialias_steps]]]])","imagerectangle(resource image, int x1, int y1, int x2, int y2, int col)","imagerotate(resource src_im, float angle, int bgd_color)","imagesavealpha(resource image, bool saveflag)","imagesetbrush(resource image, resource brush)","imagesetpixel(resource image, int x, int y, int color)","imagesetstyle(resource image, array style)","imagesetthickness(resource image, int thickness)","imagesettile(resource image, resource tile)","imagestring(resource image, int font, int x, int y, string s, int col)","imagestringup(resource image, int font, int x, int y, string s, int col)","imagesx(resource image)","imagesy(resource image)","imagetruecolortopalette(resource image, bool dither, int ncolors)","imagettfbbox(int size, int angle, string fontfile, string text)","imagettftext(resource image, int size, int angle, int x, int y, int color, string fontfile, string text)","imagetypes()","imagewbmp(resource image [, string filename [, int foreground]])","iptcembed(string iptcdata, string jpeg_file_name [, int spool])","iptcparse(string iptcblock)","jpeg2wbmp(string jpegname, string wbmpname, int d_height, int d_width, int threshold)","png2wbmp(string pngname, string wbmpname, int d_height, int d_width, int threshold)","imap_8bit(string string)","imap_alerts()","imap_append(resource imap_stream, string mbox, string message [, string options])","imap_base64(string text)","imap_binary(string string)","imap_body(resource imap_stream, int msg_number [, int options])","imap_bodystruct(resource stream_id, int msg_no, int section)","imap_check(resource imap_stream)","imap_clearflag_full(resource stream, string sequence, string flag, string options)","imap_close(resource imap_stream [, int flag])","imap_createmailbox(resource imap_stream, string mbox)","imap_delete(int imap_stream, int msg_number [, int options])","imap_deletemailbox(resource imap_stream, string mbox)","imap_errors()","imap_expunge(resource imap_stream)","imap_fetch_overview(resource imap_stream, string sequence [, int options])","imap_fetchbody(resource imap_stream, int msg_number, string part_number [, flags options])","imap_fetchheader(resource imap_stream, int msgno, int options)","imap_fetchstructure(resource imap_stream, int msg_number [, int options])","imap_get_quota(resource imap_stream, string quota_root)","imap_get_quotaroot(resource imap_stream, string quota_root)","imap_getacl(resource stream_id, string mailbox)","imap_getmailboxes(resource imap_stream, string ref, string pattern)","imap_getsubscribed(resource imap_stream, string ref, string pattern)","imap_headerinfo(resource imap_stream, int msg_number [, int fromlength [, int subjectlength [, string defaulthost]]])","imap_headers(resource imap_stream)","imap_last_error()","imap_list(resource imap_stream, string ref, string pattern)","imap_listscan(resource imap_stream, string ref, string pattern, string content)","imap_lsub(resource imap_stream, string ref, string pattern)","imap_mail_compose(array envelope, array body)","imap_mail_copy(resource imap_stream, string msglist, string mbox [, int options])","imap_mail_move(resource imap_stream, string msglist, string mbox [, int options])","imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])","imap_mailboxmsginfo(resource imap_stream)","imap_mime_header_decode(string text)","imap_msgno(resource imap_stream, int uid)","imap_num_msg(resource imap_stream)","imap_num_recent(resource imap_stream)","imap_open(string mailbox, string username, string password [, int options])","imap_ping(resource imap_stream)","imap_qprint(string string)","imap_renamemailbox(resource imap_stream, string old_mbox, string new_mbox)","imap_reopen(resource imap_stream, string mailbox [, string options])","imap_rfc822_parse_adrlist(string address, string default_host)","imap_rfc822_parse_headers(string headers [, string defaulthost])","imap_rfc822_write_address(string mailbox, string host, string personal)","imap_search(resource imap_stream, string criteria, int options)","imap_set_quota(resource imap_stream, string quota_root, int quota_limit)","imap_setacl(resource stream_id, string mailbox, string id, string rights)","imap_setflag_full(resource stream, string sequence, string flag, string options)","imap_sort(resource stream, int criteria, int reverse [, int options [, string search_criteria]])","imap_status(resource imap_stream, string mailbox, int options)","imap_subscribe(resource imap_stream, string mbox)","imap_thread(resource stream_id [, int options])","imap_timeout(int timeout_type [, int timeout])","imap_uid(resource imap_stream, int msgno)","imap_undelete(resource imap_stream, int msg_number)","imap_unsubscribe(string imap_stream, string mbox)","imap_utf7_decode(string text)","imap_utf7_encode(string data)","imap_utf8(string mime_encoded_text)","ifx_affected_rows(int result_id)","ifx_blobinfile_mode(int mode)","ifx_byteasvarchar(int mode)","ifx_close([int link_identifier])","ifx_connect([string database [, string userid [, string password]]])","ifx_copy_blob(int bid)","ifx_create_blob(int type, int mode, string param)","ifx_create_char(string param)","ifx_do(int result_id)","ifx_error()","ifx_errormsg([int errorcode])","ifx_fetch_row(int result_id [, mixed position])","ifx_fieldproperties(int result_id)","ifx_fieldtypes(int result_id)","ifx_free_blob(int bid)","ifx_free_char(int bid)","ifx_free_result(int result_id)","ifx_get_blob(int bid)","ifx_get_char(int bid)","ifx_getsqlca(int result_id)","ifx_htmltbl_result(int result_id [, string html_table_options])","ifx_nullformat(int mode)","ifx_num_fields(int result_id)","ifx_num_rows(int result_id)","ifx_pconnect([string database [, string userid [, string password]]])","ifx_prepare(string query, int conn_id [, int cursor_def, mixed blobidarray])","ifx_query(string query, int link_identifier [, int cursor_type [, mixed blobidarray]])","ifx_textasvarchar(int mode)","ifx_update_blob(int bid, string content)","ifx_update_char(int bid, string content)","ifxus_close_slob(int bid)","ifxus_create_slob(int mode)","ifxus_free_slob(int bid)","ifxus_open_slob(long bid, int mode)","ifxus_read_slob(long bid, long nbytes)","ifxus_seek_slob(long bid, int mode, long offset)","ifxus_tell_slob(long bid)","ifxus_write_slob(long bid, string content)","ibase_add_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])","ibase_affected_rows(resource link_identifier)","ibase_backup()","ibase_blob_add(resource blob_handle, string data)","ibase_blob_cancel(resource blob_handle)","ibase_blob_close(resource blob_handle)","ibase_blob_create([resource link_identifier])","ibase_blob_echo(string blob_id)","ibase_blob_get(resource blob_handle, int len)","ibase_blob_import([resource link_identifier, resource file_handle])","ibase_blob_info(string blob_id)","ibase_blob_open(string blob_id)","ibase_close([resource connection_id])","ibase_commit_ret([resource link_identifier])","ibase_commit([resource link_identifier])","ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])","ibase_db_info(resource connection)","ibase_delete_user(string server, string dba_user_name, string dba_user_password, string user_name)","ibase_drop_db(resource connection)","ibase_errcode()","ibase_errmsg()","ibase_execute(resource query [, int bind_args])","ibase_fetch_assoc(resource result [, int fetch_flag])","ibase_fetch_object(resource result_id [, int fetch_flag])","ibase_fetch_row(resource result_identifier [, int fetch_flag])","ibase_field_info(resource result, int field_number)","ibase_free_event_handler(resource event)","ibase_free_query(resource query)","ibase_free_result(resource result_identifier)","ibase_gen_id([resource link_identifier [, string generator [, int increment]]])","ibase_modify_user(string server, string dba_user_name, string dba_user_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])","ibase_name_result(resource result, string name)","ibase_num_fields(resource result_id)","ibase_num_params(resource query)","ibase_param_info(resource query, int param_number)","ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])","ibase_prepare([resource link_identifier, string query])","ibase_query([resource link_identifier, string query [, int bind_args]])","ibase_restore()","ibase_rollback_ret([resource link_identifier])","ibase_rollback([resource link_identifier])","ibase_server_info()","ibase_service_attach()","ibase_service_detach()","ibase_set_event_handler([resource connection, callback event_handler, string event_name1 [, string event_name2 [, string ...]]])","ibase_timefmt(string format [, int columntype])","ibase_trans([int trans_args [, resource link_identifier]])","ibase_wait_event([resource connection, string event_name1 [, string event_name2 [, string ...]]])","ingres_autocommit([resource link])","ingres_close([resource link])","ingres_commit([resource link])","ingres_connect([string database [, string username [, string password]]])","ingres_fetch_array([int result_type [, resource link]])","ingres_fetch_object([int result_type [, resource link]])","ingres_fetch_row([resource link])","ingres_field_length(int index [, resource link])","ingres_field_name(int index [, resource link])","ingres_field_nullable(int index [, resource link])","ingres_field_precision(int index [, resource link])","ingres_field_scale(int index [, resource link])","ingres_field_type(int index [, resource link])","ingres_num_fields([resource link])","ingres_num_rows([resource link])","ingres_pconnect([string database [, string username [, string password]]])","ingres_query(string query [, resource link])","ingres_rollback([resource link])","ircg_channel_mode(resource connection, string channel, string mode_spec, string nick)","ircg_disconnect(resource connection, string reason)","ircg_fetch_error_msg(resource connection)","ircg_get_username(resource connection)","ircg_html_encode(string html_string)","ircg_ignore_add(resource connection, string nick)","ircg_ignore_del(resource connection, string nick)","ircg_is_conn_alive(resource connection)","ircg_join(resource connection, string channel [, string key])","ircg_kick(resource connection, string channel, string nick, string reason)","ircg_lookup_format_messages(string name)","ircg_msg(resource connection, string recipient, string message [, boolean suppress])","ircg_nick(resource connection, string nick)","ircg_nickname_escape(string nick)","ircg_nickname_unescape(string nick)","ircg_notice(resource connection, string , string message)","ircg_part(resource connection, string channel)","ircg_pconnect(string username [, string server_ip [, int server_port [, string msg_format [, array ctcp_messages [, array user_settings]]]]])","ircg_register_format_messages(string name, array messages)","ircg_set_current(resource connection)","ircg_set_file(resource connection, string path)","ircg_set_on_die(resource connection, string host, int port, string data)","ircg_topic(resource connection, string channel, string new_topic)","ircg_whois(resource connection, string nick)","java_last_exception_clear()","java_last_exception_get()","ldap_8859_to_t61(string value)","ldap_add(resource link_identifier, string dn, array entry)","ldap_bind(resource link_identifier [, string bind_rdn [, string bind_password]])","ldap_close(resource link_identifier)","ldap_compare(resource link_identifier, string dn, string attribute, string value)","ldap_connect([string hostname [, int port]])","ldap_count_entries(resource link_identifier, resource result_identifier)","ldap_delete(resource link_identifier, string dn)","ldap_dn2ufn(string dn)","ldap_err2str(int errno)","ldap_errno(resource link_identifier)","ldap_error(resource link_identifier)","ldap_explode_dn(string dn, int with_attrib)","ldap_first_attribute(resource link_identifier, resource result_entry_identifier, int ber_identifier)","ldap_first_entry(resource link_identifier, resource result_identifier)","ldap_first_reference(resource link, resource result)","ldap_free_result(resource result_identifier)","ldap_get_attributes(resource link_identifier, resource result_entry_identifier)","ldap_get_dn(resource link_identifier, resource result_entry_identifier)","ldap_get_entries(resource link_identifier, resource result_identifier)","ldap_get_option(resource link_identifier, int option, mixed retval)","ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute)","ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute)","ldap_list(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])","ldap_mod_add(resource link_identifier, string dn, array entry)","ldap_mod_del(resource link_identifier, string dn, array entry)","ldap_mod_replace(resource link_identifier, string dn, array entry)","ldap_modify(resource link_identifier, string dn, array entry)","ldap_next_attribute(resource link_identifier, resource result_entry_identifier, resource ber_identifier)","ldap_next_entry(resource link_identifier, resource result_entry_identifier)","ldap_next_reference(resource link, resource entry)","ldap_parse_reference(resource link, resource entry, array referrals)","ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)","ldap_read(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])","ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn)","ldap_sasl_bind(unknown)","ldap_search(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])","ldap_set_option(resource link_identifier, int option, mixed newval)","ldap_set_rebind_proc(resource link, string callback)","ldap_sort(resource link, resource result, string sortfilter)","ldap_start_tls(resource link)","ldap_t61_to_8859(string value)","ldap_unbind(resource link_identifier)","ezmlm_hash(string addr)","mail(string to, string subject, string message [, string additional_headers])","mailparse_determine_best_xfer_encoding(resource fp)","mailparse_msg_create()","mailparse_msg_extract_part_file(resource rfc2045, string filename [, string callbackfunc])","mailparse_msg_extract_part(resource rfc2045, string msgbody [, string callbackfunc])","mailparse_msg_free(resource rfc2045buf)","mailparse_msg_get_part_data(resource rfc2045)","mailparse_msg_get_part(resource rfc2045, string mimesection)","mailparse_msg_get_structure(resource rfc2045)","mailparse_msg_parse_file(string filename)","mailparse_msg_parse(resource rfc2045buf, string data)","mailparse_rfc822_parse_addresses(string addresses)","mailparse_stream_encode(resource sourcefp, resource destfp, string encoding)","mailparse_uudecode_all(resource fp)","abs(mixed number)","acos(float arg)","acosh(float arg)","asin(float arg)","asinh(float arg)","atan2(float y, float x)","atan(float arg)","atanh(float arg)","base_convert(string number, int frombase, int tobase)","bindec(string binary_string)","ceil(float value)","cos(float arg)","cosh(float arg)","decbin(int number)","dechex(int number)","decoct(int number)","deg2rad(float number)","exp(float arg)","expm1(float number)","floor(float value)","fmod(float x, float y)","getrandmax()","hexdec(string hex_string)","hypot(float num1, float num2)","is_finite(float val)","is_infinite(float val)","is_nan(float val)","lcg_value()","log10(float arg)","log1p(float number)","log(float arg [, float base])","max(number arg1, number arg2 [, number ...])","max(array numbers [, array ...])","min(number arg1, number arg2 [, number ...])","min(array numbers [, array ...])","mt_getrandmax()","mt_rand([int min, int max])","mt_srand(int seed)","octdec(string octal_string)","pi()","pow(number base, number exp)","rad2deg(float number)","rand([int min, int max])","round(float val [, int precision])","sin(float arg)","sinh(float arg)","sqrt(float arg)","srand(int seed)","tan(float arg)","tanh(float arg)","mb_convert_case(string str, int mode [, string encoding])","mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])","mb_convert_kana(string str, string option [, mixed encoding])","mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars)","mb_decode_mimeheader(string str)","mb_decode_numericentity(string str, array convmap [, string encoding])","mb_detect_encoding(string str [, mixed encoding-list])","mb_detect_order([mixed encoding-list])","mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]])","mb_encode_numericentity(string str, array convmap [, string encoding])","mb_ereg_match(string pattern, string string [, string option])","mb_ereg_replace(string pattern, string replacement, string string [, array option])","mb_ereg_search_getpos()","mb_ereg_search_getregs()","mb_ereg_search_init(string string [, string pattern [, string option]])","mb_ereg_search_pos([string pattern [, string option]])","mb_ereg_search_regs([string pattern [, string option]])","mb_ereg_search_setpos()","mb_ereg_search([string pattern [, string option]])","mb_ereg(string pattern, string string [, array regs])","mb_eregi_replace(string pattern, string replace, string string)","mb_eregi(string pattern, string string [, array regs])","mb_get_info([string type])","mb_http_input([string type])","mb_http_output([string encoding])","mb_internal_encoding([string encoding])","mb_language([string language])","mb_output_handler(string contents, int status)","mb_parse_str(string encoded_string [, array result])","mb_preferred_mime_name(string encoding)","mb_regex_encoding([string encoding])","mb_regex_set_options([string options])","mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameter]])","mb_split(string pattern, string string [, int limit])","mb_strcut(string str, int start [, int length [, string encoding]])","mb_strimwidth(string str, int start, int width, string trimmarker [, string encoding])","mb_strlen(string str [, string encoding])","mb_strpos(string haystack, string needle [, int offset [, string encoding]])","mb_strrpos(string haystack, string needle [, string encoding])","mb_strtolower(string str [, string encoding])","mb_strtoupper(string str [, string encoding])","mb_strwidth(string str [, string encoding])","mb_substitute_character([mixed substrchar])","mb_substr_count(string haystack, string needle [, string encoding])","mb_substr(string str, int start [, int length [, string encoding]])","mcal_append_event(int mcal_stream)","mcal_close(int mcal_stream, int flags)","mcal_create_calendar(int stream, string calendar)","mcal_date_compare(int a_year, int a_month, int a_day, int b_year, int b_month, int b_day)","mcal_date_valid(int year, int month, int day)","mcal_day_of_week(int year, int month, int day)","mcal_day_of_year(int year, int month, int day)","mcal_days_in_month(int month, int leap_year)","mcal_delete_calendar(int stream, string calendar)","mcal_delete_event(int mcal_stream [, int event_id])","mcal_event_add_attribute(int stream, string attribute, string value)","mcal_event_init(int stream)","mcal_event_set_alarm(int stream, int alarm)","mcal_event_set_category(int stream, string category)","mcal_event_set_class(int stream, int class)","mcal_event_set_description(int stream, string description)","mcal_event_set_end(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]])","mcal_event_set_recur_daily(int stream, int year, int month, int day, int interval)","mcal_event_set_recur_monthly_mday(int stream, int year, int month, int day, int interval)","mcal_event_set_recur_monthly_wday(int stream, int year, int month, int day, int interval)","mcal_event_set_recur_none(int stream)","mcal_event_set_recur_weekly(int stream, int year, int month, int day, int interval, int weekdays)","mcal_event_set_recur_yearly(int stream, int year, int month, int day, int interval)","mcal_event_set_start(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]])","mcal_event_set_title(int stream, string title)","mcal_expunge(int stream)","mcal_fetch_current_stream_event(int stream)","mcal_fetch_event(int mcal_stream, int event_id [, int options])","mcal_is_leap_year(int year)","mcal_list_alarms(int mcal_stream [, int begin_year [, int begin_month [, int begin_day [, int end_year [, int end_month [, int end_day]]]]]])","mcal_list_events(int mcal_stream, object begin_date [, object end_date])","mcal_next_recurrence(int stream, int weekstart, array next)","mcal_open(string calendar, string username, string password [, int options])","mcal_popen(string calendar, string username, string password [, int options])","mcal_rename_calendar(int stream, string old_name, string new_name)","mcal_reopen(string calendar [, int options])","mcal_snooze(int stream_id, int event_id)","mcal_store_event(int mcal_stream)","mcal_time_valid(int hour, int minutes, int seconds)","mcal_week_of_year(int day, int month, int year)","mcrypt_cbc(int cipher, string key, string data, int mode [, string iv])","mcrypt_cbc(string cipher, string key, string data, int mode [, string iv])","mcrypt_cfb(int cipher, string key, string data, int mode, string iv)","mcrypt_cfb(string cipher, string key, string data, int mode [, string iv])","mcrypt_create_iv(int size, int source)","mcrypt_decrypt(string cipher, string key, string data, string mode [, string iv])","mcrypt_ecb(int cipher, string key, string data, int mode)","mcrypt_ecb(string cipher, string key, string data, int mode [, string iv])","mcrypt_enc_get_algorithms_name(resource td)","mcrypt_enc_get_block_size(resource td)","mcrypt_enc_get_iv_size(resource td)","mcrypt_enc_get_key_size(resource td)","mcrypt_enc_get_modes_name(resource td)","mcrypt_enc_get_supported_key_sizes(resource td)","mcrypt_enc_is_block_algorithm_mode(resource td)","mcrypt_enc_is_block_algorithm(resource td)","mcrypt_enc_is_block_mode(resource td)","mcrypt_enc_self_test(resource td)","mcrypt_encrypt(string cipher, string key, string data, string mode [, string iv])","mcrypt_generic_deinit(resource td)","mcrypt_generic_end(resource td)","mcrypt_generic_init(resource td, string key, string iv)","mcrypt_generic(resource td, string data)","mcrypt_get_block_size(int cipher)","mcrypt_get_block_size(string cipher, string module)","mcrypt_get_cipher_name(int cipher)","mcrypt_get_cipher_name(string cipher)","mcrypt_get_iv_size(resource td)","mcrypt_get_iv_size(string cipher, string mode)","mcrypt_get_key_size(int cipher)","mcrypt_get_key_size(string cipher, string module)","mcrypt_list_algorithms([string lib_dir])","mcrypt_list_modes([string lib_dir])","mcrypt_module_close(resource td)","mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])","mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])","mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])","mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])","mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])","mcrypt_module_is_block_mode(string mode [, string lib_dir])","mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory)","mcrypt_module_self_test(string algorithm [, string lib_dir])","mcrypt_ofb(int cipher, string key, string data, int mode, string iv)","mcrypt_ofb(string cipher, string key, string data, int mode [, string iv])","mdecrypt_generic(resource td, string data)","mcve_adduser(resource conn, string admin_password, int usersetup)","mcve_adduserarg(resource usersetup, int argtype, string argval)","mcve_bt(resource conn, string username, string password)","mcve_checkstatus(resource conn, int identifier)","mcve_chkpwd(resource conn, string username, string password)","mcve_chngpwd(resource conn, string admin_password, string new_password)","mcve_completeauthorizations(resource conn, int&array)","mcve_connect(resource conn)","mcve_connectionerror(resource conn)","mcve_deleteresponse(resource conn, int identifier)","mcve_deletetrans(resource conn, int identifier)","mcve_deleteusersetup(resource usersetup)","mcve_deluser(resource conn, string admin_password, string username)","mcve_destroyconn(resource conn)","mcve_destroyengine()","mcve_disableuser(resource conn, string admin_password, string username)","mcve_edituser(resource conn, string admin_password, int usersetup)","mcve_enableuser(resource conn, string admin_password, string username)","mcve_force(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)","mcve_getcell(resource conn, int identifier, string column, int row)","mcve_getcellbynum(resource conn, int identifier, int column, int row)","mcve_getcommadelimited(resource conn, int identifier)","mcve_getheader(resource conn, int identifier, int column_num)","mcve_getuserarg(resource usersetup, int argtype)","mcve_getuserparam(resource conn, long identifier, int key)","mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)","mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)","mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)","mcve_initconn()","mcve_initengine(string location)","mcve_initusersetup()","mcve_iscommadelimited(resource conn, int identifier)","mcve_liststats(resource conn, string admin_password)","mcve_listusers(resource conn, string admin_password)","mcve_maxconntimeout(resource conn, int secs)","mcve_monitor(resource conn)","mcve_numcolumns(resource conn, int identifier)","mcve_numrows(resource conn, int identifier)","mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)","mcve_parsecommadelimited(resource conn, int identifier)","mcve_ping(resource conn)","mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)","mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)","mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)","mcve_responseparam(resource conn, long identifier, string key)","mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)","mcve_returncode(resource conn, int identifier)","mcve_returnstatus(resource conn, int identifier)","mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)","mcve_setblocking(resource conn, int tf)","mcve_setdropfile(resource conn, string directory)","mcve_setip(resource conn, string host, int port)","mcve_setssl_files(string sslkeyfile, string sslcertfile)","mcve_setssl(resource conn, string host, int port)","mcve_settimeout(resource conn, int seconds)","mcve_settle(resource conn, string username, string password, string batch)","mcve_text_avs(string code)","mcve_text_code(string code)","mcve_text_cv(int code)","mcve_transactionauth(resource conn, int identifier)","mcve_transactionavs(resource conn, int identifier)","mcve_transactionbatch(resource conn, int identifier)","mcve_transactioncv(resource conn, int identifier)","mcve_transactionid(resource conn, int identifier)","mcve_transactionitem(resource conn, int identifier)","mcve_transactionssent(resource conn)","mcve_transactiontext(resource conn, int identifier)","mcve_transinqueue(resource conn)","mcve_transnew(resource conn)","mcve_transparam(resource conn, long identifier, int key)","mcve_transsend(resource conn, long identifier)","mcve_ub(resource conn, string username, string password)","mcve_uwait(long microsecs)","mcve_verifyconnection(resource conn, int tf)","mcve_verifysslcert(resource conn, int tf)","mcve_void(resource conn, string username, string password, int sid, int ptrannum)","mhash_count()","mhash_get_block_size(int hash)","mhash_get_hash_name(int hash)","mhash_keygen_s2k(int hash, string password, string salt, int bytes)","mhash(int hash, string data, string [ key ])","mime_content_type(string filename)","mssql_bind(resource stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]])","mssql_close([resource link_identifier])","mssql_connect([string servername [, string username [, string password]]])","mssql_data_seek(resource result_identifier, int row_number)","mssql_execute(resource stmt [, bool skip_results])","mssql_fetch_array(resource result [, int result_type])","mssql_fetch_assoc(resource result_id)","mssql_fetch_batch(resource result_index)","mssql_fetch_field(resource result [, int field_offset])","mssql_fetch_object(resource result)","mssql_fetch_row(resource result)","mssql_field_length(resource result [, int offset])","mssql_field_name(resource result [, int offset])","mssql_field_seek(resource result, int field_offset)","mssql_field_type(resource result [, int offset])","mssql_free_result(resource result)","mssql_free_statement(resource statement)","mssql_get_last_message()","mssql_guid_string(string binary [, int short_format])","mssql_init(string sp_name [, resource conn_id])","mssql_min_error_severity(int severity)","mssql_min_message_severity(int severity)","mssql_next_result(resource result_id)","mssql_num_fields(resource result)","mssql_num_rows(resource result)","mssql_pconnect([string servername [, string username [, string password]]])","mssql_query(string query [, resource link_identifier [, int batch_size]])","mssql_result(resource result, int i, mixed field)","mssql_rows_affected(resource conn_id)","mssql_select_db(string database_name [, resource link_identifier])","ming_setcubicthreshold(int threshold)","ming_setscale(int scale)","ming_useswfversion(int version)","swfaction(string script)","swfbutton_keypress(string str)","SWFBitmap","SWFBitmap(string filename [, int alphafilename])","getheight()","getwidth()","SWFbutton","SWFbutton()","addaction(resource action, int flags)","addshape(resource shape, int flags)","setaction(resource action)","setdown(resource shape)","sethit(resource shape)","setover(resource shape)","setup(resource shape)","SWFDisplayItem","SWFDisplayItem()","addcolor([int red [, int green [, int blue [, int a]]]])","move(int dx, int dy)","moveto(int x, int y)","multcolor([int red [, int green [, int blue [, int a]]]])","remove()","rotate(float ddegrees)","rotateto(float degrees)","scale(int dx, int dy)","scaleto(int x, int y)","setdepth(float depth)","setname(string name)","setratio(float ratio)","skewx(float ddegrees)","skewxto(float degrees)","skewy(float ddegrees)","skewyto(float degrees)","SWFFill","SWFFill()","skewxto(float x)","skewyto(float y)","SWFFont","SWFFont(string filename)","getwidth(string string)","SWFGradient","SWFGradient()","addentry(float ratio, int red, int green, int blue [, int a])","SWFMorph","SWFMorph()","getshape1()","getshape2()","SWFMovie","SWFMovie()","add(resource instance)","nextframe()","output()","remove(resource instance)","save(string filename)","setbackground(int red, int green, int blue)","setdimension(int width, int height)","setframes(string numberofframes)","setrate(int rate)","streammp3(string mp3FileName)","SWFShape","SWFShape()","addfill(int red, int green, int blue [, int a])","addfill(SWFbitmap bitmap [, int flags])","addfill(SWFGradient gradient [, int flags])","drawcurve(int controldx, int controldy, int anchordx, int anchordy)","drawcurveto(int controlx, int controly, int anchorx, int anchory)","drawline(int dx, int dy)","drawlineto(int x, int y)","movepen(int dx, int dy)","movepento(int x, int y)","setleftfill(swfgradient fill)","setleftfill(int red, int green, int blue [, int a])","setline(int width [, int red [, int green [, int blue [, int a]]]])","setrightfill(swfgradient fill)","setrightfill(int red, int green, int blue [, int a])","SWFSprite","SWFSprite()","add(resource object)","remove(resource object)","setframes(int numberofframes)","SWFText","SWFText()","addstring(string string)","setcolor(int red, int green, int blue [, int a])","setfont(string font)","setheight(int height)","setspacing(float spacing)","SWFTextField","SWFTextField([int flags])","align(int alignement)","setbounds(int width, int height)","setindentation(int width)","setleftmargin(int width)","setlinespacing(int height)","setmargins(int left, int right)","setrightmargin(int width)","connection_aborted()","connection_status()","connection_timeout()","constant(string name)","define(string name, mixed value [, int case_insensitive])","defined(string name)","die(string message)","eval(string code_str)","exit()","get_browser([string user_agent])","highlight_file(string filename)","highlight_string(string str)","ignore_user_abort([int setting])","pack(string format [, mixed args])","show_source(string filename)","sleep(int seconds)","uniqid(string prefix [, boolean lcg])","unpack(string format, string data)","usleep(int micro_seconds)","udm_add_search_limit(resource agent, int var, string val)","udm_alloc_agent(string dbaddr [, string dbmode])","udm_api_version()","udm_cat_list(resource agent, string category)","udm_cat_path(resource agent, string category)","udm_check_charset(resource agent, string charset)","udm_check_stored(resource agent, int link, string doc_id)","udm_clear_search_limits(resource agent)","udm_close_stored(resource agent, int link)","udm_crc32(resource agent, string str)","udm_errno(resource agent)","udm_error(resource agent)","udm_find(resource agent, string query)","udm_free_agent(resource agent)","udm_free_ispell_data(int agent)","udm_free_res(resource res)","udm_get_doc_count(resource agent)","udm_get_res_field(resource res, int row, int field)","udm_get_res_param(resource res, int param)","udm_load_ispell_data(resource agent, int var, string val1, string val2, int flag)","udm_open_stored(resource agent, string storedaddr)","udm_set_agent_param(resource agent, int var, string val)","msql_affected_rows(int query_identifier)","msql_close(int link_identifier)","msql_connect([string hostname [, string server [, string username [, string password]]]])","msql_create_db(string database_name [, int link_identifier])","msql_createdb(string database_name [, int link_identifier])","msql_data_seek(int query_identifier, int row_number)","msql_dbname(int query_identifier, int i)","msql_drop_db(string database_name, int link_identifier)","msql_error([int link_identifier])","msql_fetch_array(int query_identifier [, int result_type])","msql_fetch_field(int query_identifier, int field_offset)","msql_fetch_object(int query_identifier [, int result_type])","msql_fetch_row(int query_identifier)","msql_field_seek(int query_identifier, int field_offset)","msql_fieldflags(int query_identifier, int i)","msql_fieldlen(int query_identifier, int i)","msql_fieldname(int query_identifier, int field)","msql_fieldtable(int query_identifier, int field)","msql_fieldtype(int query_identifier, int i)","msql_free_result(int query_identifier)","msql_list_dbs()","msql_list_fields(string database, string tablename)","msql_list_tables(string database)","msql_num_fields(int query_identifier)","msql_num_rows(resource query_identifier)","msql_numfields(int query_identifier)","msql_numrows()","msql_pconnect([string server [, string username [, string password]]])","msql_query(string query, int link_identifier)","msql_result(int query_identifier, int i, mixed field)","msql_select_db(string database_name, int link_identifier)","msql_tablename(int query_identifier, int field)","msql(string database, string query, int link_identifier)","mysql_affected_rows([resource link_identifier])","mysql_change_user(string user, string password [, string database [, resource link_identifier]])","mysql_client_encoding([resource link_identifier])","mysql_close([resource link_identifier])","mysql_connect([string server [, string username [, string password [, bool new_link [, int client_flags]]]]])","mysql_create_db(string database_name [, resource link_identifier])","mysql_data_seek(resource result, int row_number)","mysql_db_name(resource result, int row [, mixed field])","mysql_db_query(string database, string query [, resource link_identifier])","mysql_drop_db(string database_name [, resource link_identifier])","mysql_errno([resource link_identifier])","mysql_error([resource link_identifier])","mysql_escape_string(string unescaped_string)","mysql_fetch_array(resource result [, int result_type])","mysql_fetch_assoc(resource result)","mysql_fetch_field(resource result [, int field_offset])","mysql_fetch_lengths(resource result)","mysql_fetch_object(resource result [, string class_name [, array params]])","mysql_fetch_row(resource result)","mysql_field_flags(resource result, int field_offset)","mysql_field_len(resource result, int field_offset)","mysql_field_name(resource result, int field_offset)","mysql_field_seek(resource result, int field_offset)","mysql_field_table(resource result, int field_offset)","mysql_field_type(resource result, int field_offset)","mysql_free_result(resource result)","mysql_get_client_info(void )","mysql_get_host_info([resource link_identifier])","mysql_get_proto_info([resource link_identifier])","mysql_get_server_info([resource link_identifier])","mysql_info([resource link_identifier])","mysql_insert_id([resource link_identifier])","mysql_list_dbs([resource link_identifier])","mysql_list_fields(string database_name, string table_name [, resource link_identifier])","mysql_list_processes([resource link_identifier])","mysql_list_tables(string database [, resource link_identifier])","mysql_num_fields(resource result)","mysql_num_rows(resource result)","mysql_pconnect([string server [, string username [, string password [, int client_flags]]]])","mysql_ping([resource link_identifier])","mysql_query(string query [, resource link_identifier])","mysql_real_escape_string(string unescaped_string [, resource link_identifier])","mysql_result(resource result, int row [, mixed field])","mysql_select_db(string database_name [, resource link_identifier])","mysql_set_charset(string charset [, resource link_identifier])","mysql_stat([resource link_identifier])","mysql_tablename(resource result, int i)","mysql_thread_id([resource link_identifier])","mysql_unbuffered_query(string query [, resource link_identifier])","mysqli_affected_rows(object link)","mysqli_autocommit(object link, bool mode)","mysqli_bind_param(object stmt, array types, mixed var1 [, mixed var2, ...])","mysqli_bind_result(resource stmt, mixed var, int len)","mysqli_change_user(resource link, string user, string password, string database)","mysqli_character_set_name(resource link)","mysqli_close(resource link)","mysqli_commit(resource link)","mysqli_connect([string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]])","mysqli_data_seek(resource result, int offset)","mysqli_debug(string debug)","mysqli_disable_reads_from_master(resource link)","mysqli_disable_rpl_parse(resource link)","mysqli_dump_debug_info(resource link)","mysqli_enable_reads_from_master(resource link)","mysqli_enable_rpl_parse(resource link)","mysqli_errno(resource link)","mysqli_error(resource link)","mysqli_execute(resource stmt)","mysqli_fetch_array(resource result [, int resulttype])","mysqli_fetch_assoc(resource result)","mysqli_fetch_field_direct(resource result, int offset)","mysqli_fetch_field(resource result)","mysqli_fetch_fields(resource result)","mysqli_fetch_lengths(resource result)","mysqli_fetch_object(resource result)","mysqli_fetch_row(resource result)","mysqli_fetch(resource stmt)","mysqli_field_count(resource link)","mysqli_field_seek(resource link, int fieldnr)","mysqli_field_tell(resource result)","mysqli_free_result(resource result)","mysqli_get_client_info()","mysqli_get_host_info(resource link)","mysqli_get_proto_info(resource link)","mysqli_get_server_info(resource link)","mysqli_get_server_version(resource link)","mysqli_info(resource link)","mysqli_init()","mysqli_insert_id(resource link)","mysqli_kill(resource link, int processid)","mysqli_master_query(resource link, string query)","mysqli_num_fields(resource result)","mysqli_num_rows(resource result)","mysqli_options(resource link, int flags, mixed values)","mysqli_param_count(resource stmt)","mysqli_ping(resource link)","mysqli_prepare_result(resource stmt)","mysqli_prepare(resource link, string query)","mysqli_profiler(int flags, string info, int port)","mysqli_query(resource link, string query [, int resultmode])","mysqli_read_query_result(resource link)","mysqli_real_connect(resource link [, string hostname [, string username [, string passwd [, string dbname [, int port [, string socket]]]]]])","mysqli_real_escape_string(resource link, string escapestr)","mysqli_real_query(resource link, string query)","mysqli_reload(resource link)","mysqli_rollback(resource link)","mysqli_rpl_parse_enabled(resource link)","mysqli_rpl_probe(resource link)","mysqli_rpl_query_type(string query)","mysqli_select_db(resource link, string dbname)","mysqli_send_long_data(resource stmt, int param_nr, string data)","mysqli_send_query(resource link, string query)","mysqli_slave_query(resource link, string query)","mysqli_ssl_set(resource link [, string key [, string cert [, string ca [, string capath [, string cipher]]]]])","mysqli_stat(resource link)","mysqli_stmt_affected_rows(object stmt)","mysqli_stmt_close(resource stmt)","mysqli_stmt_errno(resource stmt)","mysqli_stmt_error(resource stmt)","mysqli_stmt_store_result(resource stmt)","mysqli_store_result(resource link)","mysqli_thread_id(resource link)","mysqli_thread_safe()","mysqli_use_result(resource link)","mysqli_warning_count(resource link)","msession_connect(string host, string port)","msession_count()","msession_create(string session)","msession_destroy(string name)","msession_disconnect()","msession_find(string name, string value)","msession_get_array(string session)","msession_get(string session, string name, string value)","msession_getdata(string session)","msession_inc(string session, string name)","msession_list()","msession_listvar(string name)","msession_lock(string name)","msession_plugin(string session, string val [, string param])","msession_randstr(int param)","msession_set_array(string session, array tuples)","msession_set(string session, string name, string value)","msession_setdata(string session, string value)","msession_timeout(string session [, int param])","msession_uniq(int param)","msession_unlock(string session, int key)","muscat_close(resource muscat_handle)","muscat_get(resource muscat_handle)","muscat_give(resource muscat_handle, string string)","muscat_setup_net(string muscat_host, int port)","muscat_setup(int size [, string muscat_dir])","checkdnsrr(string host [, string type])","closelog()","debugger_off()","debugger_on(string address)","define_syslog_variables()","dns_check_record(string host [, string type])","dns_get_mx(string hostname, array mxhosts [, array&weight])","dns_get_record(string hostname [, int type [, array&authns, array&addtl]])","fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])","gethostbyaddr(string ip_address)","gethostbyname(string hostname)","gethostbynamel(string hostname)","getmxrr(string hostname, array mxhosts [, array weight])","getprotobyname(string name)","getprotobynumber(int number)","getservbyname(string service, string protocol)","getservbyport(int port, string protocol)","ip2long(string ip_address)","long2ip(int proper_address)","openlog(string ident, int option, int facility)","pfsockopen(string hostname, int port [, int errno [, string errstr [, int timeout]]])","socket_get_status(resource socketstream)","socket_set_blocking(int socket descriptor, int mode)","socket_set_timeout(int socket descriptor, int seconds, int microseconds)","syslog(int priority, string message)","ncurses_addch(int ch)","ncurses_addchnstr(string s, int n)","ncurses_addchstr(string s)","ncurses_addnstr(string s, int n)","ncurses_addstr(string text)","ncurses_assume_default_colors(int fg, int bg)","ncurses_attroff(int attributes)","ncurses_attron(int attributes)","ncurses_attrset(int attributes)","ncurses_baudrate()","ncurses_beep()","ncurses_bkgd(int attrchar)","ncurses_bkgdset(int attrchar)","ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)","ncurses_bottom_panel(resource panel)","ncurses_can_change_color()","ncurses_cbreak()","ncurses_clear()","ncurses_clrtobot()","ncurses_clrtoeol()","ncurses_color_content(int color, int&r, int&g, int&b)","ncurses_color_set(int pair)","ncurses_curs_set(int visibility)","ncurses_def_prog_mode()","ncurses_def_shell_mode()","ncurses_define_key(string definition, int keycode)","ncurses_del_panel(resource panel)","ncurses_delay_output(int milliseconds)","ncurses_delch()","ncurses_deleteln()","ncurses_delwin(resource window)","ncurses_doupdate()","ncurses_echo()","ncurses_echochar(int character)","ncurses_end()","ncurses_erase()","ncurses_erasechar()","ncurses_filter()","ncurses_flash()","ncurses_flushinp()","ncurses_getch()","ncurses_getmaxyx(resource window, int&y, int&x)","ncurses_getmouse(array mevent)","ncurses_getyx(resource window, int&y, int&x)","ncurses_halfdelay(int tenth)","ncurses_has_colors()","ncurses_has_ic()","ncurses_has_il()","ncurses_has_key(int keycode)","ncurses_hide_panel(resource panel)","ncurses_hline(int charattr, int n)","ncurses_inch()","ncurses_init_color(int color, int r, int g, int b)","ncurses_init_pair(int pair, int fg, int bg)","ncurses_init()","ncurses_insch(int character)","ncurses_insdelln(int count)","ncurses_insertln()","ncurses_insstr(string text)","ncurses_instr(string buffer)","ncurses_isendwin()","ncurses_keyok(int keycode, bool enable)","ncurses_keypad(resource window, bool bf)","ncurses_killchar()","ncurses_longname()","ncurses_meta(resource window, bool 8bit)","ncurses_mouse_trafo(int&y, int&x, bool toscreen)","ncurses_mouseinterval(int milliseconds)","ncurses_mousemask(int newmask, int oldmask)","ncurses_move_panel(resource panel, int startx, int starty)","ncurses_move(int y, int x)","ncurses_mvaddch(int y, int x, int c)","ncurses_mvaddchnstr(int y, int x, string s, int n)","ncurses_mvaddchstr(int y, int x, string s)","ncurses_mvaddnstr(int y, int x, string s, int n)","ncurses_mvaddstr(int y, int x, string s)","ncurses_mvcur(int old_y, int old_x, int new_y, int new_x)","ncurses_mvdelch(int y, int x)","ncurses_mvgetch(int y, int x)","ncurses_mvhline(int y, int x, int attrchar, int n)","ncurses_mvinch(int y, int x)","ncurses_mvvline(int y, int x, int attrchar, int n)","ncurses_mvwaddstr(resource window, int y, int x, string text)","ncurses_napms(int milliseconds)","ncurses_new_panel(resource window)","ncurses_newpad(int rows, int cols)","ncurses_newwin(int rows, int cols, int y, int x)","ncurses_nl()","ncurses_nocbreak()","ncurses_noecho()","ncurses_nonl()","ncurses_noqiflush()","ncurses_noraw()","ncurses_pair_content(int pair, int&f, int&b)","ncurses_panel_above(resource panel)","ncurses_panel_below(resource panel)","ncurses_panel_window(resource panel)","ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)","ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)","ncurses_putp(string text)","ncurses_qiflush()","ncurses_raw()","ncurses_refresh(int ch)","ncurses_replace_panel(resource panel, resource window)","ncurses_reset_prog_mode()","ncurses_reset_shell_mode()","ncurses_resetty()","ncurses_savetty()","ncurses_scr_dump(string filename)","ncurses_scr_init(string filename)","ncurses_scr_restore(string filename)","ncurses_scr_set(string filename)","ncurses_scrl(int count)","ncurses_show_panel(resource panel)","ncurses_slk_attr()","ncurses_slk_attroff(int intarg)","ncurses_slk_attron(int intarg)","ncurses_slk_attrset(int intarg)","ncurses_slk_clear()","ncurses_slk_color(int intarg)","ncurses_slk_init(int format)","ncurses_slk_noutrefresh()","ncurses_slk_refresh()","ncurses_slk_restore()","ncurses_slk_set(int labelnr, string label, int format)","ncurses_slk_touch()","ncurses_standend()","ncurses_standout()","ncurses_start_color()","ncurses_termattrs()","ncurses_termname()","ncurses_timeout(int millisec)","ncurses_top_panel(resource panel)","ncurses_typeahead(int fd)","ncurses_ungetch(int keycode)","ncurses_ungetmouse(array mevent)","ncurses_update_panels()","ncurses_use_default_colors()","ncurses_use_env(bool flag)","ncurses_use_extended_names(bool flag)","ncurses_vidattr(int intarg)","ncurses_vline(int charattr, int n)","ncurses_waddch(resource window, int ch)","ncurses_waddstr(resource window, string str [, int n])","ncurses_wattroff(resource window, int attrs)","ncurses_wattron(resource window, int attrs)","ncurses_wattrset(resource window, int attrs)","ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)","ncurses_wclear(resource window)","ncurses_wcolor_set(resource window, int color_pair)","ncurses_werase(resource window)","ncurses_wgetch(resource window)","ncurses_whline(resource window, int charattr, int n)","ncurses_wmouse_trafo(resource window, int&y, int&x, bool toscreen)","ncurses_wmove(resource window, int y, int x)","ncurses_wnoutrefresh(resource window)","ncurses_wrefresh(resource window)","ncurses_wstandend(resource window)","ncurses_wstandout(resource window)","ncurses_wvline(resource window, int charattr, int n)","notes_body(string server, string mailbox, int msg_number)","notes_copy_db(string from_database_name, string to_database_name)","notes_create_db(string database_name)","notes_create_note(string database_name, string form_name)","notes_drop_db(string database_name)","notes_find_note(string database_name, string name [, string type])","notes_header_info(string server, string mailbox, int msg_number)","notes_list_msgs(string db)","notes_mark_read(string database_name, string user_name, string note_id)","notes_mark_unread(string database_name, string user_name, string note_id)","notes_nav_create(string database_name, string name)","notes_search(string database_name, string keywords)","notes_unread(string database_name, string user_name)","notes_version(string database_name)","nsapi_request_headers()","nsapi_response_headers()","nsapi_virtual(string uri)","odbc_autocommit(resource connection_id [, bool OnOff])","odbc_binmode(resource result_id, int mode)","odbc_close_all()","odbc_close(resource connection_id)","odbc_columnprivileges(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])","odbc_columns(resource connection_id [, string qualifier [, string schema [, string table_name [, string column_name]]]])","odbc_commit(resource connection_id)","odbc_connect(string dsn, string user, string password [, int cursor_type])","odbc_cursor(resource result_id)","odbc_data_source(resource connection_id, constant fetch_type)","odbc_do(resource conn_id, string query)","odbc_error([resource connection_id])","odbc_errormsg([resource connection_id])","odbc_exec(resource connection_id, string query_string)","odbc_execute(resource result_id [, array parameters_array])","odbc_fetch_array(resource result [, int rownumber])","odbc_fetch_into(resource result_id [, int rownumber, array result_array])","odbc_fetch_into(resource result_id, array result_array [, int rownumber])","odbc_fetch_object(resource result [, int rownumber])","odbc_fetch_row(resource result_id [, int row_number])","odbc_field_len(resource result_id, int field_number)","odbc_field_name(resource result_id, int field_number)","odbc_field_num(resource result_id, string field_name)","odbc_field_precision(resource result_id, int field_number)","odbc_field_scale(resource result_id, int field_number)","odbc_field_type(resource result_id, int field_number)","odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)","odbc_free_result(resource result_id)","odbc_gettypeinfo(resource connection_id [, int data_type])","odbc_longreadlen(resource result_id, int length)","odbc_next_result(resource result_id)","odbc_num_fields(resource result_id)","odbc_num_rows(resource result_id)","odbc_pconnect(string dsn, string user, string password [, int cursor_type])","odbc_prepare(resource connection_id, string query_string)","odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)","odbc_procedurecolumns(resource connection_id [, string qualifier [, string owner [, string proc [, string column]]]])","odbc_procedures(resource connection_id [, string qualifier [, string owner [, string name]]])","odbc_result_all(resource result_id [, string format])","odbc_result(resource result_id, mixed field)","odbc_rollback(resource connection_id)","odbc_setoption(resource id, int function, int option, int param)","odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)","odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy)","odbc_tableprivileges(resource connection_id [, string qualifier [, string owner [, string name]]])","odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string types]]]])","aggregate_info(object object)","aggregate_methods_by_list(object object, string class_name, array methods_list [, bool exclude])","aggregate_methods_by_regexp(object object, string class_name, string regexp [, bool exclude])","aggregate_methods(object object, string class_name)","aggregate_properties_by_list(object object, string class_name, array properties_list [, bool exclude])","aggregate_properties_by_regexp(object object, string class_name, string regexp [, bool exclude])","aggregate_properties(object object, string class_name)","aggregate(object object, string class_name)","deaggregate(object object [, string class_name])","ocibindbyname(resource stmt, string ph_name, mixed&variable [, int maxlength [, int type]])","ocicancel(resource stmt)","ocicloselob()","ocicollappend(string value)","ocicollassign(object from)","ocicollassignelem(int ndx, string val)","ocicollgetelem(int ndx)","ocicollmax()","ocicollsize()","ocicolltrim(int num)","ocicolumnisnull(resource stmt, mixed col)","ocicolumnname(resource stmt, int col)","ocicolumnprecision(resource stmt, int col)","ocicolumnscale(resource stmt, int col)","ocicolumnsize(resource stmt, mixed column)","ocicolumntype(resource stmt, int col)","ocicolumntyperaw(resource stmt, int col)","ocicommit(resource connection)","ocidefinebyname(resource stmt, string column_name, mixed&variable [, int type])","ocierror([resource stmt|conn|global])","ociexecute(resource stmt [, int mode])","ocifetch(resource stmt)","ocifetchinto(resource stmt, array&result [, int mode])","ocifetchstatement(resource stmt, array&output [, int skip [, int maxrows [, int flags]]])","ocifreecollection()","ocifreecursor(resource stmt)","ocifreedesc()","ocifreestatement(resource stmt)","ociinternaldebug(int onoff)","ociloadlob()","ocilogoff(resource connection)","ocilogon(string username, string password [, string db])","ocinewcollection(resource connection, string tdo [, string schema])","ocinewcursor(resource conn)","ocinewdescriptor(resource connection [, int type])","ocinlogon(string username, string password [, string db])","ocinumcols(resource stmt)","ociparse(resource conn, string query)","ociplogon(string username, string password [, string db])","ociresult(resource statement, mixed col)","ocirollback(resource connection)","ocirowcount(resource stmt)","ocisavelob()","ocisavelobfile()","ociserverversion(resource conn)","ocisetprefetch(resource stmt, int rows)","ocistatementtype(resource stmt)","ociwritelobtofile([string filename [, int start [, int length]]])","ociwritetemporarylob(string var [, int lob_type])","openssl_csr_export_to_file(resource csr, string outfilename [, bool notext])","openssl_csr_export(resource csr, string&out [, bool notext])","openssl_csr_new(array dn, resource privkey [, array configargs [, array extraattribs]])","openssl_csr_sign(mixed csr, mixed cacert, mixed priv_key, int days)","openssl_error_string()","openssl_free_key(int key_identifier)","openssl_get_privatekey(string key [, string passphrase])","openssl_get_publickey(string certificate)","openssl_open(string sealed_data, string open_data, string env_key, int priv_key_id)","openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])","openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, int flags])","openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers [, int flags [, string extracerts]])","openssl_pkcs7_verify(string filename, int flags [, string outfilename [, array cainfo [, string extracerts]]])","openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase [, array configargs]])","openssl_pkey_export(mixed key, string&out [, string passphrase [, array configargs]])","openssl_get_privatekey(mixed key [, string passphrase])","openssl_pkey_get_public(mixed certificate)","openssl_pkey_new([array configargs])","openssl_private_decrypt(string data, string&decrypted, mixed key [, int padding])","openssl_private_encrypt(string data, string crypted, mixed key [, int padding])","openssl_public_decrypt(string data, string crypted, resource key [, int padding])","openssl_public_encrypt(string data, string crypted, mixed key [, int padding])","openssl_seal(string data, string sealed_data, array env_keys, array pub_key_ids)","openssl_sign(string data, string signature, int priv_key_id)","openssl_verify(string data, string signature, int pub_key_id)","openssl_x509_check_private_key(mixed cert, mixed key)","openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])","openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext])","openssl_x509_export(mixed x509, string&output [, bool notext])","openssl_x509_free(resource x509cert)","openssl_x509_parse(mixed x509cert [, bool shortnames])","openssl_x509_read(mixed x509certdata)","ora_bind(resource cursor, string PHP_variable_name, string SQL_parameter_name, int length [, int type])","ora_close(resource cursor)","ora_columnname(resource cursor, int column)","ora_columnsize(resource cursor, int column)","ora_columntype(resource cursor, int column)","ora_commit(resource conn)","ora_commitoff(resource conn)","ora_commiton(resource conn)","ora_do(resource conn, string query)","ora_error(resource cursor_or_connection)","ora_errorcode(resource cursor_or_connection)","ora_exec(resource cursor)","ora_fetch_into(resource cursor, array result [, int flags])","ora_fetch(resource cursor)","ora_getcolumn(resource cursor, int column)","ora_logoff(resource connection)","ora_logon(string user, string password)","ora_numcols(resource cursor)","ora_numrows(resource cursor)","ora_open(resource connection)","ora_parse(resource cursor, string sql_statement, int defer)","ora_plogon(string user, string password)","ora_rollback(resource connection)","ovrimos_close(int connection)","ovrimos_commit(int connection_id)","ovrimos_connect(string host, string db, string user, string password)","ovrimos_cursor(int result_id)","ovrimos_exec(int connection_id, string query)","ovrimos_execute(int result_id [, array parameters_array])","ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]])","ovrimos_fetch_row(int result_id [, int how [, int row_number]])","ovrimos_field_len(int result_id, int field_number)","ovrimos_field_name(int result_id, int field_number)","ovrimos_field_num(int result_id, string field_name)","ovrimos_field_type(int result_id, int field_number)","ovrimos_free_result(int result_id)","ovrimos_longreadlen(int result_id, int length)","ovrimos_num_fields(int result_id)","ovrimos_num_rows(int result_id)","ovrimos_prepare(int connection_id, string query)","ovrimos_result_all(int result_id [, string format])","ovrimos_result(int result_id, mixed field)","ovrimos_rollback(int connection_id)","flush()","ob_clean()","ob_end_clean()","ob_end_flush()","ob_flush()","ob_get_clean()","ob_get_contents()","ob_get_length()","ob_get_level()","ob_get_status([bool full_status])","ob_gzhandler(string buffer [, int mode])","ob_implicit_flush([int flag])","ob_start([string output_callback])","overload([string class_name])","pdf_add_annotation(int pdf document, double llx, double lly, double urx, double ury, string title, string content)","pdf_add_bookmark(resource pdfdoc, string text [, int parent [, int open]])","pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename)","pdf_add_locallink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, int page, string dest)","pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)","pdf_add_outline(int pdf document, string text [, int parent [, int open]])","pdf_add_pdflink(resource pdfdoc, float bottom_left_x, float bottom_left_y, float up_right_x, float up_right_y, string filename, int page, string dest)","pdf_add_thumbnail(resource pdfdoc, int image)","pdf_add_weblink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, string url)","pdf_arc(int pdf document, double x-coor, double y-coor, double radius, double start, double end)","pdf_arcn(resource pdfdoc, float x, float y, float r, float alpha, float beta)","pdf_attach_file(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)","pdf_begin_page(int pdf document, double width, double height)","pdf_begin_pattern(resource pdfdoc, float width, float height, float xstep, float ystep, int painttype)","pdf_begin_template(resource pdfdoc, float width, float height)","pdf_circle(int pdf document, double x-coor, double y-coor, double radius)","pdf_clip(int pdf document)","pdf_close_image(int image)","pdf_close_pdi_page(resource pdfdoc, int pagehandle)","pdf_close_pdi(resource pdfdoc, int dochandle)","pdf_close(int pdf document)","pdf_closepath_fill_stroke(int pdf document)","pdf_closepath_stroke(int pdf document)","pdf_closepath(int pdf document)","pdf_concat(resource pdfdoc, float a, float b, float c, float d, float e, float f)","pdf_continue_text(int pdf document, string text)","pdf_curveto(int pdf document, double x1, double y1, double x2, double y2, double x3, double y3)","pdf_delete(resource pdfdoc)","pdf_end_page(int pdf document)","pdf_end_pattern(resource pdfdoc)","pdf_end_template(resource pdfdoc)","pdf_endpath(int pdf document)","pdf_fill_stroke(int pdf document)","pdf_fill(int pdf document)","pdf_findfont(resource pdfdoc, string fontname, string encoding [, int embed])","pdf_get_buffer(resource pdfdoc)","pdf_get_image_height(int pdf document, int image)","pdf_get_image_width(int pdf document, int image)","pdf_get_majorversion()","pdf_get_minorversion()","pdf_get_parameter(int pdf document, string name [, double modifier])","pdf_get_pdi_parameter(resource pdfdoc, string key, int document, int page, int index)","pdf_get_pdi_value(resource pdfdoc, string key, int doc, int page, int index)","pdf_get_value(int pdf document, string name [, double modifier])","pdf_initgraphics(resource pdfdoc)","pdf_lineto(int pdf document, double x-coor, double y-coor)","pdf_makespotcolor(resource pdfdoc, string spotname)","pdf_moveto(int pdf document, double x-coor, double y-coor)","pdf_new()","pdf_open_CCITT(resource pdfdoc, string filename, int width, int height, int BitReverse, int k, int Blackls1)","pdf_open_file(resource pdfdoc [, string filename])","pdf_open_gif(int pdf document, string filename)","pdf_open_image_file(int PDF-document, string format, string filename)","pdf_open_image(resource PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params)","pdf_open_jpeg(int pdf document, string filename)","pdf_open_memory_image(int pdf document, int image)","pdf_open_pdi_page(resource pdfdoc, int dochandle, int pagenumber, string pagelabel)","pdf_open_pdi(resource pdfdoc, string filename, string stringparam, int intparam)","pdf_open_png(int pdf, string png_file)","pdf_open_tiff(int PDF-document, string filename)","pdf_open(int file)","pdf_place_image(int pdf document, int image, double x-coor, double y-coor, double scale)","pdf_place_pdi_page(resource pdfdoc, int page, float x, float y, float sx, float sy)","pdf_rect(int pdf document, double x-coor, double y-coor, double width, double height)","pdf_restore(int pdf document)","pdf_rotate(int pdf document, double angle)","pdf_save(int pdf document)","pdf_scale(int pdf document, double x-scale, double y-scale)","pdf_set_border_color(int pdf document, double red, double green, double blue)","pdf_set_border_dash(int pdf document, double black, double white)","pdf_set_border_style(int pdf document, string style, double width)","pdf_set_char_spacing(int pdf document, double space)","pdf_set_duration(int pdf document, double duration)","pdf_set_font(int pdf document, string font name, double size, string encoding [, int embed])","pdf_set_horiz_scaling(int pdf document, double scale)","pdf_set_info(int pdf document, string fieldname, string value)","pdf_set_leading(int pdf document, double distance)","pdf_set_parameter(int pdf document, string name, string value)","pdf_set_text_matrix(int pdf document, array matrix)","pdf_set_text_pos(int pdf document, double x-coor, double y-coor)","pdf_set_text_rendering(int pdf document, int mode)","pdf_set_text_rise(int pdf document, double rise)","pdf_set_value(int pdf document, string name, double value)","pdf_set_word_spacing(int pdf document, double space)","pdf_setcolor(resource pdfdoc, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]])","pdf_setdash(int pdf document, double white, double black)","pdf_setflat(int pdf document, double value)","pdf_setfont(resource pdfdoc, int font, float size)","pdf_setgray_fill(int pdf document, double gray value)","pdf_setgray_stroke(int pdf document, double gray value)","pdf_setgray(int pdf document, double gray value)","pdf_setlinecap(int pdf document, int value)","pdf_setlinejoin(int pdf document, long value)","pdf_setlinewidth(int pdf document, double width)","pdf_setmatrix(resource pdfdoc, float a, float b, float c, float d, float e, float f)","pdf_setmiterlimit(int pdf document, double value)","pdf_setrgbcolor_fill(int pdf document, double red value, double green value, double blue value)","pdf_setrgbcolor_stroke(int pdf document, double red value, double green value, double blue value)","pdf_setrgbcolor(int pdf document, double red value, double green value, double blue value)","pdf_show_boxed(int pdf document, string text, double x-coor, double y-coor, double width, double height, string mode [, string feature])","pdf_show_xy(int pdf document, string text, double x-coor, double y-coor)","pdf_show(int pdf document, string text)","pdf_skew(int pdf document, double alpha, double beta)","pdf_stringwidth(int pdf document, string text)","pdf_stroke(int pdf document)","pdf_translate(int pdf document, double x-coor, double y-coor)","pfpro_cleanup()","pfpro_init()","pfpro_process_raw(string parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]])","pfpro_process(array parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]])","pfpro_version()","assert_options(int what [, mixed value])","assert(string|bool assertion)","dl(string library)","extension_loaded(string name)","get_cfg_var(string varname)","get_current_user()","get_defined_constants()","get_extension_funcs(string module_name)","get_include_path()","get_included_files()","get_loaded_extensions()","get_magic_quotes_gpc()","get_magic_quotes_runtime()","get_required_files()","getenv(string varname)","getlastmod()","getmygid()","getmyinode()","getmypid()","getmyuid()","getopt(string options)","getrusage([int who])","ini_alter(string varname, string newvalue)","ini_get_all([string extension])","ini_get(string varname)","ini_restore(string varname)","ini_set(string varname, string newvalue)","memory_get_usage()","php_ini_scanned_files()","php_logo_guid()","php_sapi_name()","php_uname()","phpcredits(int flag)","phpinfo([int what])","phpversion()","putenv(string setting)","restore_include_path()","set_include_path(string new_include_path)","set_magic_quotes_runtime(int new_setting)","set_time_limit(int seconds)","time_nanosleep(unknown)","version_compare(string version1, string version2 [, string operator])","zend_logo_guid()","zend_version()","posix_ctermid()","posix_get_last_error()","posix_getcwd()","posix_getegid()","posix_geteuid()","posix_getgid()","posix_getgrgid(int gid)","posix_getgrnam(string name)","posix_getgroups()","posix_getlogin()","posix_getpgid(int pid)","posix_getpgrp()","posix_getpid()","posix_getppid()","posix_getpwnam(string username)","posix_getpwuid(int uid)","posix_getrlimit()","posix_getsid(int pid)","posix_getuid()","posix_isatty(int fd)","posix_kill(int pid, int sig)","posix_mkfifo(string pathname, int mode)","posix_setegid(int gid)","posix_seteuid(int uid)","posix_setgid(int gid)","posix_setpgid(int pid, int pgid)","posix_setsid()","posix_setuid(int uid)","posix_strerror(int errno)","posix_times()","posix_ttyname(int fd)","posix_uname()","pg_affected_rows(resource result)","pg_cancel_query(resource connection)","pg_client_encoding([resource connection])","pg_close(resource connection)","pg_connect(string connection_string)","pg_connection_busy(resource connection)","pg_connection_reset(resource connection)","pg_connection_status(resource connection)","pg_convert(resource connection, string table_name, array assoc_array [, int options])","pg_copy_from(resource connection, string table_name, array rows [, string delimiter [, string null_as]])","pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])","pg_dbname(resource connection)","pg_delete(resource connection, string table_name, array assoc_array [, int options])","pg_end_copy([resource connection])","pg_escape_bytea(string data)","pg_escape_string(string data)","pg_fetch_all(resource result)","pg_fetch_array(resource result [, int row [, int result_type]])","pg_fetch_assoc(resource result [, int row])","pg_fetch_object(resource result [, int row [, int result_type]])","pg_fetch_result(resource result, int row, mixed field)","pg_fetch_row(resource result, int row)","pg_field_is_null(resource result, int row, mixed field)","pg_field_name(resource result, int field_number)","pg_field_num(resource result, string field_name)","pg_field_prtlen(resource result, int row_number, string field_name)","pg_field_size(resource result, int field_number)","pg_field_type(resource result, int field_number)","pg_free_result(resource result)","pg_get_notify(resource connection [, int result_type])","pg_get_pid(resource connection)","pg_get_result([resource connection])","pg_host(resource connection)","pg_insert(resource connection, string table_name, array assoc_array [, int options])","pg_last_error([resource connection])","pg_last_notice(resource connection)","pg_last_oid(resource result)","pg_lo_close(resource large_object)","pg_lo_create(resource connection)","pg_lo_export(int oid, string pathname [, resource connection])","pg_lo_import([resource connection, string pathname])","pg_lo_import(string pathname [, resource connection])","pg_lo_open(resource connection, int oid, string mode)","pg_lo_read_all(resource large_object)","pg_lo_read(resource large_object, int len)","pg_lo_seek(resource large_object, int offset [, int whence])","pg_lo_tell(resource large_object)","pg_lo_unlink(resource connection, int oid)","pg_lo_write(resource large_object, string data)","pg_meta_data(resource connection, string table_name)","pg_num_fields(resource result)","pg_num_rows(resource result)","pg_options(resource connection)","pg_pconnect(string connection_string)","pg_ping(resource connection)","pg_port(resource connection)","pg_put_line([resource connection, string data])","pg_query(resource connection, string query)","pg_result_error(resource result)","pg_result_seek(resource result, int offset)","pg_result_status(resource result)","pg_select(resource connection, string table_name, array assoc_array [, int options])","pg_send_query(resource connection, string query)","pg_send_query(string query)","pg_set_client_encoding([resource connection, string encoding])","pg_trace(string pathname [, string mode [, resource connection]])","pg_tty(resource connection)","pg_unescape_bytea(string data)","pg_untrace([resource connection])","pg_update(resource connection, string table_name, array data, array condition [, int options])","pg_version(unknown)","php_check_syntax(string filename)","php_strip_whitespace(string filename)","pcntl_exec(string path [, array args [, array envs]])","pcntl_getpriority([int pid])","pcntl_fork()","pcntl_signal(int signo, callback handle [, bool restart_syscalls])","pcntl_wait(int &status [, int options])","pcntl_waitpid(int pid, int&status, int options)","pcntl_wexitstatus(int status)","pcntl_wifexited(int status)","pcntl_wifsignaled(int status)","pcntl_wifstopped(int status)","pcntl_wstopsig(int status)","pcntl_wtermsig(int status)","escapeshellarg(string arg)","escapeshellcmd(string command)","exec(string command [, string array [, int return_var]])","passthru(string command [, int return_var])","proc_close(resource process)","proc_get_status(resource process)","proc_nice(int priority)","proc_open(string cmd, array descriptorspec, array pipes)","proc_terminate(resource process [, int signal])","shell_exec(string cmd)","system(string command [, int return_var])","printer_abort(resource handle)","printer_close(resource handle)","printer_create_brush(int style, string color)","printer_create_dc(resource handle)","printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton)","printer_create_pen(int style, int width, string color)","printer_delete_brush(resource handle)","printer_delete_dc(resource handle)","printer_delete_font(resource handle)","printer_delete_pen(resource handle)","printer_draw_bmp(resource handle, string filename, int x, int y)","printer_draw_chord(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1)","printer_draw_elipse(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)","printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y)","printer_draw_pie(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y)","printer_draw_rectangle(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)","printer_draw_roundrect(resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height)","printer_draw_text(resource printer_handle, string text, int x, int y)","printer_end_doc(resource handle)","printer_end_page(resource handle)","printer_get_option(resource handle, string option)","printer_list(int enumtype [, string name [, int level]])","printer_logical_fontheight(resource handle, int height)","printer_open([string devicename])","printer_select_brush(resource printer_handle, resource brush_handle)","printer_select_font(resource printer_handle, resource font_handle)","printer_select_pen(resource printer_handle, resource pen_handle)","printer_set_option(resource handle, int option, mixed value)","printer_start_doc(resource handle [, string document])","printer_start_page(resource handle)","printer_write(resource handle, string content)","pspell_add_to_personal(int dictionary_link, string word)","pspell_add_to_session(int dictionary_link, string word)","pspell_check(int dictionary_link, string word)","pspell_clear_session(int dictionary_link)","pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])","pspell_config_data_dir(unknown)","pspell_config_dict_dir(unknown)","pspell_config_ignore(int dictionary_link, int n)","pspell_config_mode(int dictionary_link, int mode)","pspell_config_personal(int dictionary_link, string file)","pspell_config_repl(int dictionary_link, string file)","pspell_config_runtogether(int dictionary_link, bool flag)","pspell_config_save_repl(int dictionary_link, bool flag)","pspell_new_config(int config)","pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])","pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])","pspell_save_wordlist(int dictionary_link)","pspell_store_replacement(int dictionary_link, string misspelled, string correct)","pspell_suggest(int dictionary_link, string word)","readline_add_history(string line)","readline_clear_history()","readline_completion_function(string line)","readline_info([string varname [, string newvalue]])","readline_list_history()","readline_read_history(string filename)","readline_write_history(string filename)","readline([string prompt])","recode_file(string request, resource input, resource output)","recode_string(string request, string string)","preg_grep(string pattern, array input)","preg_match_all(string pattern, string subject, array matches [, int flags])","preg_match(string pattern, string subject [, array matches [, int flags]])","preg_quote(string str [, string delimiter])","preg_replace_callback(mixed pattern, callback callback, mixed subject [, int limit])","preg_replace(mixed pattern, mixed replacement, mixed subject [, int limit])","preg_split(string pattern, string subject [, int limit [, int flags]])","qdom_error()","qdom_tree(string)","ereg_replace(string pattern, string replacement, string string)","ereg(string pattern, string string [, array regs])","eregi_replace(string pattern, string replacement, string string)","eregi(string pattern, string string [, array regs])","split(string pattern, string string [, int limit])","spliti(string pattern, string string [, int limit])","sql_regcase(string string)","ftok(string pathname, string proj)","msg_get_queue(int key [, int perms])","msg_receive(int queue, int desiredmsgtype, int msgtype, int maxsize, mixed message [, bool unserialize [, int flags [, int errorcode]]])","msg_remove_queue(int queue)","msg_send(int queue, int msgtype, mixed message [, bool serialize [, bool blocking [, int errorcode]]])","msg_set_queue(int queue, array data)","msg_stat_queue(int queue)","sem_acquire(int sem_identifier)","sem_get(int key [, int max_acquire [, int perm]])","sem_release(int sem_identifier)","sem_remove(int sem_identifier)","shm_attach(int key [, int memsize [, int perm]])","shm_detach(int shm_identifier)","shm_get_var(int id, int variable_key)","shm_put_var(int shm_identifier, int variable_key, mixed variable)","shm_remove_var(int id, int variable_key)","shm_remove(int shm_identifier)","sesam_affected_rows(string result_id)","sesam_commit()","sesam_connect(string catalog, string schema, string user)","sesam_diagnostic()","sesam_disconnect()","sesam_errormsg()","sesam_execimm(string query)","sesam_fetch_array(string result_id [, int whence [, int offset]])","sesam_fetch_result(string result_id [, int max_rows])","sesam_fetch_row(string result_id [, int whence [, int offset]])","sesam_field_array(string result_id)","sesam_field_name(string result_id, int index)","sesam_free_result(string result_id)","sesam_num_fields(string result_id)","sesam_query(string query [, bool scrollable])","sesam_rollback()","sesam_seek_row(string result_id, int whence [, int offset])","sesam_settransaction(int isolation_level, int read_only)","session_cache_expire([int new_cache_expire])","session_cache_limiter([string cache_limiter])","session_decode(string data)","session_destroy()","session_encode()","session_get_cookie_params()","session_id([string id])","session_is_registered(string name)","session_module_name([string module])","session_name([string name])","session_regenerate_id()","session_register(mixed name [, mixed ...])","session_save_path([string path])","session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])","session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)","session_start()","session_unregister(string name)","session_unset()","session_write_close()","shmop_close(int shmid)","shmop_delete(int shmid)","shmop_open(int key, string flags, int mode, int size)","shmop_read(int shmid, int start, int count)","shmop_size(int shmid)","shmop_write(int shmid, string data, int offset)","sqlite_array_query(resource dbhandle, string query [, int result_type [, bool decode_binary]])","sqlite_array_query(string query, resource dbhandle [, int result_type [, bool decode_binary]])","sqlite_busy_timeout(resource dbhandle, int milliseconds)","sqlite_changes(resource dbhandle)","sqlite_close(resource dbhandle)","sqlite_column(resource result, mixed index_or_name [, bool decode_binary])","sqlite_create_aggregate(resource dbhandle, string function_name, mixed step_func, mixed finalize_func [, int num_args])","sqlite_create_function(resource dbhandle, string function_name, mixed callback [, int num_args])","sqlite_current(resource result [, int result_type [, bool decode_binary]])","sqlite_error_string(int error_code)","sqlite_escape_string(string item)","sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])","sqlite_fetch_column_types(unknown)","sqlite_fetch_single(resource result [, int result_type [, bool decode_binary]])","sqlite_field_name(resource result, int field_index)","sqlite_has_more(resource result)","sqlite_last_error(resource dbhandle)","sqlite_last_insert_rowid(resource dbhandle)","sqlite_libencoding()","sqlite_libversion()","sqlite_next(resource result)","sqlite_num_fields(resource result)","sqlite_num_rows(resource result)","sqlite_open(string filename [, int mode [, string&error_message]])","sqlite_popen(string filename [, int mode [, string&error_message]])","sqlite_query(resource dbhandle, string query)","sqlite_query(string query, resource dbhandle)","sqlite_rewind(resource result)","sqlite_seek(resource result, int rownum)","sqlite_udf_decode_binary(string data)","sqlite_udf_encode_binary(string data)","sqlite_unbuffered_query(resource dbhandle, string query)","sqlite_unbuffered_query(string query, resource dbhandle)","swf_actiongeturl(string url, string target)","swf_actiongotoframe(int framenumber)","swf_actiongotolabel(string label)","swf_actionnextframe()","swf_actionplay()","swf_actionprevframe()","swf_actionsettarget(string target)","swf_actionstop()","swf_actiontogglequality()","swf_actionwaitforframe(int framenumber, int skipcount)","swf_addbuttonrecord(int states, int shapeid, int depth)","swf_addcolor(float r, float g, float b, float a)","swf_closefile([int return_file])","swf_definebitmap(int objid, string image_name)","swf_definefont(int fontid, string fontname)","swf_defineline(int objid, float x1, float y1, float x2, float y2, float width)","swf_definepoly(int objid, array coords, int npoints, float width)","swf_definerect(int objid, float x1, float y1, float x2, float y2, float width)","swf_definetext(int objid, string str, int docenter)","swf_endbutton()","swf_enddoaction()","swf_endshape()","swf_endsymbol()","swf_fontsize(float size)","swf_fontslant(float slant)","swf_fonttracking(float tracking)","swf_getbitmapinfo(int bitmapid)","swf_getfontinfo()","swf_getframe()","swf_labelframe(string name)","swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist)","swf_modifyobject(int depth, int how)","swf_mulcolor(float r, float g, float b, float a)","swf_nextid()","swf_oncondition(int transition)","swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b)","swf_ortho2(float xmin, float xmax, float ymin, float ymax)","swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)","swf_perspective(float fovy, float aspect, float near, float far)","swf_placeobject(int objid, int depth)","swf_polarview(float dist, float azimuth, float incidence, float twist)","swf_popmatrix()","swf_posround(int round)","swf_pushmatrix()","swf_removeobject(int depth)","swf_rotate(float angle, string axis)","swf_scale(float x, float y, float z)","swf_setfont(int fontid)","swf_setframe(int framenumber)","swf_shapearc(float x, float y, float r, float ang1, float ang2)","swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3)","swf_shapecurveto(float x1, float y1, float x2, float y2)","swf_shapefillbitmapclip(int bitmapid)","swf_shapefillbitmaptile(int bitmapid)","swf_shapefilloff()","swf_shapefillsolid(float r, float g, float b, float a)","swf_shapelinesolid(float r, float g, float b, float a, float width)","swf_shapelineto(float x, float y)","swf_shapemoveto(float x, float y)","swf_showframe()","swf_startbutton(int objid, int type)","swf_startdoaction()","swf_startshape(int objid)","swf_startsymbol(int objid)","swf_textwidth(string str)","swf_translate(float x, float y, float z)","swf_viewport(float xmin, float xmax, float ymin, float ymax)","snmp_get_quick_print()","snmp_read_mib(unknown)","snmp_set_quick_print(bool quick_print)","snmpget(string hostname, string community, string object_id [, int timeout [, int retries]])","snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])","snmpset(string hostname, string community, string object_id, string type, mixed value [, int timeout [, int retries]])","snmpwalk(string hostname, string community, string object_id [, int timeout [, int retries]])","snmpwalkoid(string hostname, string community, string object_id [, int timeout [, int retries]])","socket_accept(resource socket)","socket_bind(resource socket, string address [, int port])","socket_clear_error([resource socket])","socket_close(resource socket)","socket_connect(resource socket, string address [, int port])","socket_create_listen(int port [, int backlog])","socket_create_pair(int domain, int type, int protocol, array&fd)","socket_create(int domain, int type, int protocol)","socket_get_option(resource socket, int level, int optname)","socket_getpeername(resource socket, string&addr [, int&port])","socket_getsockname(resource socket, string&addr [, int&port])","socket_iovec_add(resource iovec, int iov_len)","socket_iovec_alloc(int num_vectors [, int ])","socket_iovec_delete(resource iovec, int iov_pos)","socket_iovec_fetch(resource iovec, int iovec_position)","socket_iovec_free(resource iovec)","socket_iovec_set(resource iovec, int iovec_position, string new_val)","socket_last_error([resource socket])","socket_listen(resource socket [, int backlog])","socket_read(resource socket, int length [, int type])","socket_readv(resource socket, resource iovec_id)","socket_recv(resource socket, string&buf, int len, int flags)","socket_recvfrom(resource socket, string&buf, int len, int flags, string&name [, int&port])","socket_recvmsg(resource socket, resource iovec, array&control, int&controllen, int&flags, string&addr [, int&port])","socket_select(array&read, array&write, array&except, int tv_sec [, int tv_usec])","socket_send(resource socket, string buf, int len, int flags)","socket_sendmsg(resource socket, resource iovec, int flags, string addr [, int port])","socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])","socket_set_block(resource socket)","socket_set_nonblock(resource socket)","socket_set_option(resource socket, int level, int optname, mixed optval)","socket_shutdown(resource socket [, int how])","socket_strerror(int errno)","socket_write(resource socket, string buffer [, int length])","socket_writev(resource socket, resource iovec_id)","my_notifier(int notification_code, int severity, string message, int message_code, int bytes_transferred, int bytes_max)","stream_context_create(array options)","stream_context_get_options(resource stream|context)","stream_context_set_option(resource context|stream, string wrapper, string option, mixed value)","stream_context_set_params(resource stream|context, array params)","stream_copy_to_stream(resource source, resource dest [, int maxlength])","stream_filter_append(resource stream, string filtername [, int read_write [, mixed params]])","stream_filter_prepend(resource stream, string filtername [, int read_write [, mixed params]])","stream_filter_register(string filtername, string classname)","filter(resource in, resource out, int&consumed, bool closing)","oncreate()","onclose()","stream_get_filters()","stream_get_line(resource handle, int length, string ending)","stream_get_meta_data(resource stream)","stream_get_transports()","stream_get_wrappers()","stream_select(resource&read, resource&write, resource&except, int tv_sec [, int tv_usec])","stream_set_blocking(resource stream, int mode)","stream_set_timeout(resource stream, int seconds [, int microseconds])","stream_set_write_buffer(resource stream, int buffer)","stream_socket_accept(resource server_socket [, int timeout [, string&peername]])","stream_socket_client(string remote_socket [, int&errno [, string&errstr [, float timeout [, int flags [, resource context]]]]])","stream_socket_get_name(resource handle, bool want_peer)","stream_socket_recvfrom(resource socket, int length [, int flags [, string &address]])","stream_socket_sendto(resource socket, string data [, int flags [, string address]])","stream_socket_server(string local_socket [, int&errno [, string&errstr [, int flags [, resource context]]]])","stream_wrapper_register(string protocol, string classname)","stream_open(string path, string mode, int options, string opened_path)","stream_close()","stream_read(int count)","stream_write(string data)","stream_eof()","stream_tell()","stream_seek(int offset, int whence)","stream_flush()","stream_stat()","unlink(string path)","dir_opendir(string path, int options)","dir_readdir()","dir_rewinddir()","dir_closedir()","addcslashes(string str, string charlist)","addslashes(string str)","bin2hex(string str)","chop(string str)","chr(int ascii)","chunk_split(string string [, int chunklen [, string end]])","convert_cyr_string(string str, string from, string to)","count_chars(string string [, int mode])","convert_uudecode()","convert_uuencode()","crc32(string str)","crypt(string str [, string salt])","echo(string arg1 [, string argn...])","explode(string separator, string string [, int limit])","fprintf(resource handle, string format [, mixed args])","get_html_translation_table(int table [, int quote_style])","hebrev(string hebrew_text [, int max_chars_per_line])","hebrevc(string hebrew_text [, int max_chars_per_line])","html_entity_decode(string string [, int quote_style [, string charset]])","htmlentities(string string [, int quote_style [, string charset]])","htmlspecialchars(string string [, int quote_style])","implode(string glue, array pieces)","join(string glue, array pieces)","levenshtein(string str1, string str2)","levenshtein(string str1, string str2, int cost_ins, int cost_rep, int cost_del)","levenshtein(string str1, string str2, function cost)","localeconv()","ltrim(string str [, string charlist])","md5_file(string filename [, bool raw_output])","md5(string str)","metaphone(string str)","money_format(string format, float number)","nl_langinfo(int item)","nl2br(string string)","number_format(float number [, int decimals])","number_format(float number, int decimals, string dec_point, string thousands_sep)","ord(string string)","parse_str(string str [, array arr])","print(string arg)","printf(string format [, mixed args])","quoted_printable_decode(string str)","quotemeta(string str)","rtrim(string str [, string charlist])","setlocale(string category, string locale)","sha1_file(string filename [, bool raw_output])","sha1(string str [, bool raw_output])","similar_text(string first, string second [, double percent])","soundex(string str)","sprintf(string format [, mixed args])","sscanf(string str, string format [, string var1])","str_ireplace(mixed search, mixed replace, mixed subject [, int&count])","str_pad(string input, int pad_length [, string pad_string [, int pad_type]])","str_repeat(string input, int multiplier)","str_replace(string needle, string str, string haystack)","str_rot13(string str)","str_shuffle(string str)","str_split(string string [, int split_length])","str_word_count(string string [, int format])","strcasecmp(string str1, string str2)","strchr(string haystack, string needle)","strcmp(string str1, string str2)","strcoll(string str1, string str2)","strcspn(string str1, string str2)","strip_tags(string str [, string allowable_tags])","stripcslashes(string str)","stripos(string haystack, string needle [, int offset])","stripslashes(string str)","stristr(string haystack, string needle)","strlen(string str)","strnatcasecmp(string str1, string str2)","strnatcmp(string str1, string str2)","strncasecmp(string str1, string str2, int len)","strncmp(string str1, string str2, int len)","strpos(string haystack, string needle [, int offset])","strpbrk(string str, string charset)","strrchr(string haystack, string needle)","strrev(string string)","strripos(string haystack, string needle)","strrpos(string haystack, char needle)","strspn(string str1, string str2)","strstr(string haystack, string needle)","strtok(string arg1, string arg2)","strtolower(string str)","strtoupper(string string)","strtr(string str, string from, string to)","substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])","substr_count(string haystrack, string needle)","substr_replace(string string, string replacement, int start [, int length])","substr(string string, int start [, int length])","trim(string str [, string charlist])","ucfirst(string str)","ucwords(string str)","vprintf(string format, array args)","vsprintf(string format, array args)","wordwrap(string str [, int width [, string break [, int cut]]])","sybase_affected_rows([resource link_identifier])","sybase_close([resource link_identifier])","sybase_connect([string servername [, string username [, string password [, string charset [, string appname]]]]])","sybase_data_seek(resource result_identifier, int row_number)","sybase_deadlock_retry_count(int retry_count)","sybase_fetch_array(resource result)","sybase_fetch_assoc(resource result)","sybase_fetch_field(resource result [, int field_offset])","sybase_fetch_object(resource result [, mixed object])","sybase_fetch_row(resource result)","sybase_field_seek(resource result, int field_offset)","sybase_free_result(resource result)","sybase_get_last_message()","sybase_min_client_severity(int severity)","sybase_min_error_severity(int severity)","sybase_min_message_severity(int severity)","sybase_min_server_severity(int severity)","sybase_num_fields(resource result)","sybase_num_rows(resource result)","sybase_pconnect([string servername [, string username [, string password [, string charset [, string appname]]]]])","sybase_query(string query, resource link_identifier)","sybase_result(resource result, int row, mixed field)","sybase_select_db(string database_name [, resource link_identifier])","sybase_set_message_handler(callback handler)","sybase_unbuffered_query(string query, resource link_identifier)","tidy_access_count()","tidy_clean_repair()","tidy_config_count()","tidy_diagnose()","tidy_error_count()","tidy_get_body(resource tidy)","tidy_get_config()","tidy_get_error_buffer([bool detailed])","tidy_get_head()","tidy_get_html_ver()","tidy_get_html()","tidy_get_output()","tidy_get_release()","tidy_get_root()","tidy_get_status()","tidy_getopt(string option)","tidy_is_xhtml()","tidy_load_config(string filename, string encoding)","tidy_node","tidy_node()","children()","get_attr(int attrib_id)","get_nodes(int node_id)","has_children()","has_siblings()","is_asp()","is_comment()","is_html()","is_jsp()","is_jste()","is_text()","is_xhtml()","is_xml()","next()","prev()","tidy_parse_file(string file [, bool use_include_path])","tidy_parse_string(string input)","tidy_repair_file(string filename [, string config_file [, bool use_include_path]])","tidy_repair_string(string data [, string config_file])","tidy_reset_config()","tidy_save_config(string filename)","tidy_set_encoding(string encoding)","tidy_setopt(string option, mixed newvalue)","tidy_warning_count()","token_get_all(string source)","token_name(int token)","base64_decode(string encoded_data)","base64_encode(string data)","get_meta_tags(string filename [, int use_include_path])","http_build_query(array formdata [, string numeric_prefix])","parse_url(string url)","rawurldecode(string str)","rawurlencode(string str)","urldecode(string str)","urlencode(string str)","empty(mixed var)","floatval(mixed var)","get_defined_vars()","get_resource_type(resource handle)","gettype(mixed var)","import_request_variables(string types [, string prefix])","intval(mixed var [, int base])","is_array(mixed var)","is_bool(mixed var)","is_callable(mixed var [, bool syntax_only [, string callable_name]])","is_float(mixed var)","is_int(mixed var)","is_null(mixed var)","is_numeric(mixed var)","is_object(mixed var)","is_resource(mixed var)","is_scalar(mixed var)","is_string(mixed var)","isset(mixed var [, mixed var [, ...]])","print_r(mixed expression [, bool return])","serialize(mixed value)","settype(mixed var, string type)","strval(mixed var)","unserialize(string str [, string callback])","unset(mixed var [, mixed var [, ...]])","var_dump(mixed expression [, mixed expression [, ...]])","var_export(mixed expression [, bool return])","vpopmail_add_alias_domain_ex(string olddomain, string newdomain)","vpopmail_add_alias_domain(string domain, string aliasdomain)","vpopmail_add_domain_ex(string domain, string passwd [, string quota [, string bounce [, bool apop]]])","vpopmail_add_domain(string domain, string dir, int uid, int gid)","vpopmail_add_user(string user, string domain, string password [, string gecos [, bool apop]])","vpopmail_alias_add(string user, string domain, string alias)","vpopmail_alias_del_domain(string domain)","vpopmail_alias_del(string user, string domain)","vpopmail_alias_get_all(string domain)","vpopmail_alias_get(string alias, string domain)","vpopmail_auth_user(string user, string domain, string password [, string apop])","vpopmail_del_domain_ex(string domain)","vpopmail_del_domain(string domain)","vpopmail_del_user(string user, string domain)","vpopmail_error()","vpopmail_passwd(string user, string domain, string password)","vpopmail_set_user_quota(string user, string domain, string quota)","w32api_deftype(string typename, string member1_type, string member1_name [, string ... [, string ...]])","w32api_init_dtype(string typename, mixed value [, mixed ...])","w32api_invoke_function(string funcname, mixed argument [, mixed ...])","w32api_register_function(string library, string function_name, string return_type)","w32api_set_call_method(int method)","wddx_add_vars(int packet_id, mixed name_var [, mixed ...])","wddx_deserialize(string packet)","wddx_packet_end(int packet_id)","wddx_packet_start([string comment])","wddx_serialize_value(mixed var [, string comment])","wddx_serialize_vars(mixed var_name [, mixed ...])","utf8_decode(string data)","utf8_encode(string data)","xml_error_string(int code)","xml_get_current_byte_index(resource parser)","xml_get_current_column_number(resource parser)","xml_get_current_line_number(resource parser)","xml_get_error_code(resource parser)","xml_parse_into_struct(resource parser, string data, array&values [, array&index])","xml_parse(resource parser, string data [, bool is_final])","xml_parser_create_ns([string encoding [, string separator]])","xml_parser_create([string encoding])","xml_parser_free(resource parser)","xml_parser_get_option(resource parser, int option)","xml_parser_set_option(resource parser, int option, mixed value)","xml_set_character_data_handler(resource parser, callback handler)","handler(resource parser, string data)","xml_set_default_handler(resource parser, callback handler)","xml_set_element_handler(resource parser, callback start_element_handler, callback end_element_handler)","start_element_handler(resource parser, string name, array attribs)","end_element_handler(resource parser, string name)","xml_set_end_namespace_decl_handler(resource pind, callback handler)","xml_set_external_entity_ref_handler(resource parser, callback handler)","handler(resource parser, string open_entity_names, string base, string system_id, string public_id)","xml_set_notation_decl_handler(resource parser, callback handler)","handler(resource parser, string notation_name, string base, string system_id, string public_id)","xml_set_object(resource parser, object object)","xml_set_processing_instruction_handler(resource parser, callback handler)","handler(resource parser, string target, string data)","xml_set_start_namespace_decl_handler(resource pind, callback hdl)","xml_set_unparsed_entity_decl_handler(resource parser, callback handler)","handler(resource parser, string entity_name, string base, string system_id, string public_id, string notation_name)","xmlrpc_decode_request(string xml, string&method [, string encoding])","xmlrpc_decode(string xml [, string encoding])","xmlrpc_encode_request(string method, mixed params)","xmlrpc_encode(mixed value)","xmlrpc_get_type(mixed value)","xmlrpc_parse_method_descriptions(string xml)","xmlrpc_server_add_introspection_data(resource server, array desc)","xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])","xmlrpc_server_create()","xmlrpc_server_destroy(resource server)","xmlrpc_server_register_introspection_callback(resource server, string function)","xmlrpc_server_register_method(resource server, string method_name, string function)","xmlrpc_set_type(string value, string type)","xslt_create()","xslt_errno([ int xh])","xslt_error([int xh])","xslt_free(resource xh)","xslt_process(resource xh, string xml, string xsl [, string result [, array arguments [, array parameters]]])","xslt_set_base(resource xh, string uri)","xslt_set_encoding(resource xh, string encoding)","xslt_set_error_handler(resource xh, mixed handler)","xslt_set_log(resource xh, mixed log)","xslt_set_sax_handler(resource xh, array handlers)","xslt_set_sax_handlers(resource processor, array handlers)","xslt_set_scheme_handler(resource xh, array handlers)","xslt_set_scheme_handlers(resource processor, array handlers)","yaz_addinfo(resource id)","yaz_ccl_conf(resource id, array config)","yaz_ccl_parse(resource id, string query, array& result)","yaz_close(resource id)","yaz_connect(string zurl [, mixed options])","yaz_database(resource id, string databases)","yaz_element(resource id, string elementset)","yaz_errno(resource id)","yaz_error(resource id)","yaz_get_option(resource id, string name)","yaz_hits(resource id)","yaz_itemorder(resource id, array args)","yaz_present(resource id)","yaz_range(resource id, int start, int number)","yaz_record(resource id, int pos, string type)","yaz_scan_result(resource id [, array& result])","yaz_scan(resource id, string type, string startterm [, array flags])","yaz_schema(resource id, string schema)","yaz_search(resource id, string type, string query)","yaz_set_option(resource id, string name, string value)","yaz_sort(resource id, string criteria)","yaz_syntax(resource id, string syntax)","yaz_wait([array options])","yp_all(string domain, string map, string callback)","yp_cat(string domain, string map)","yp_err_string()","yp_errno()","yp_first(string domain, string map)","yp_get_default_domain()","yp_master(string domain, string map)","yp_match(string domain, string map, string key)","yp_next(string domain, string map, string key)","yp_order(string domain, string map)","zip_close(resource zip)","zip_entry_close(resource zip_entry)","zip_entry_compressedsize(resource zip_entry)","zip_entry_compressionmethod(resource zip_entry)","zip_entry_filesize(resource zip_entry)","zip_entry_name(resource zip_entry)","zip_entry_open(resource zip, resource zip_entry [, string mode])","zip_entry_read(resource zip_entry [, int length])","zip_open(string filename)","zip_read(resource zip)","gzclose(resource zp)","gzcompress(string data [, int level])","gzdeflate(string data [, int level])","gzencode(string data [, int level [, int encoding_mode]])","gzeof(resource zp)","gzfile(string filename [, int use_include_path])","gzgetc(resource zp)","gzgets(resource zp, int length)","gzgetss(resource zp, int length [, string allowable_tags])","gzinflate(string data [, int length])","gzopen(string filename, string mode [, int use_include_path])","gzpassthru(resource zp)","gzread(resource zp, int length)","gzrewind(resource zp)","gzseek(resource zp, int offset)","gztell(resource zp)","gzuncompress(string data [, int length])","gzwrite(resource zp, string string [, int length])","readgzfile(string filename [, int use_include_path])","zlib_get_coding_type()","php_stream_stat_path(char* path, php_stream_statbuf* ssb)","php_stream_stat(php_stream* stream, php_stream_statbuf* ssb)","php_stream_open_wrapper(char* path, char* mode, int options, char** opened)","php_stream_read(php_stream* stream, char* buf, size_t count)","php_stream_write(php_stream* stream, const char* buf, size_t count)","php_stream_eof(php_stream* stream)","php_stream_getc(php_stream* stream)","php_stream_gets(php_stream* stream, char* buf, size_t maxlen)","php_stream_close(php_stream* stream)","php_stream_flush(php_stream* stream)","php_stream_seek(php_stream* stream, off_t offset, int whence)","php_stream_tell(php_stream* stream)","php_stream_copy_to_stream(php_stream* src, php_stream* dest, size_t maxlen)","php_stream_copy_to_mem(php_stream* src, char** buf, size_t maxlen, int persistent)","php_stream_make_seekable(php_stream* origstream, php_stream** newstream, int flags)","php_stream_cast(php_stream* stream, int castas, void** ret, int flags)","php_stream_can_cast(php_stream* stream, int castas)","php_stream_is_persistent(php_stream* stream)","php_stream_is(php_stream* stream, int istype)","php_stream_passthru(php_stream* stream)","php_register_url_stream_wrapper(char* protocol, php_stream_wrapper* wrapper, TSRMLS_DC)","php_unregister_url_stream_wrapper(char* protocol, TSRMLS_DC)","php_stream_open_wrapper_ex(char* path, char* mode, int options, char** opened, php_stream_context* context)","php_stream_open_wrapper_as_file(char* path, char* mode, int options, char** opened)","php_stream_filter_register_factory(const char* filterpattern, php_stream_filter_factory* factory)","php_stream_filter_unregister_factory(const char* filterpattern)","php_stream_opendir(char* path, php_stream_context* context)","php_stream_readdir(php_stream* dirstream, php_stream_dirent* ent)","php_stream_rewinddir(php_stream* dirstream)","php_stream_closedir(php_stream* dirstream)","php_stream_fopen_from_file(FILE* file, char* mode)","php_stream_fopen_tmpfile()","php_stream_fopen_temporary_file(const char* dir, const char* pfx, char** opened)","php_stream_sock_open_from_socket(int socket, int persistent)","php_stream_sock_open_host(const char* host, unsigned short port, int socktype, struct timeval* timeout, int persistent)","php_stream_sock_open_unix(const char* path, int pathlen, int persistent, struct timeval* timeout)"]