<?xml version="1.0" encoding="UTF-8"?>
<root __ideNodeOpen="true"><include src="$library/extjslib2.xml"/><package __ideNodeOpen="true" name="GO"><component name="json" transparent="" precode="" __ideNodeOpen="false">		case 'calls':
			
			if(isset($_POST['delete_keys']))
			{
				try
				{
					if($GO_MODULES-&gt;modules['calllog']['permission_level'] &lt; GO_SECURITY::MANAGE_PERMISSION)
					{
						throw new AccessDeniedException();
					}
					
					$response['deleteSuccess']=true;
					$delete_calls = json_decode($_POST['delete_keys']);
					foreach($delete_calls as $call)
					{
						$calllog-&gt;delete_call($call);
					}
				}catch(Exception $e)
				{
					$response['deleteSuccess']=false;
					$response['deleteFeedback']=$e-&gt;getMessage();
				}
			}
			
			$sort = isset($_REQUEST['sort']) ? $_REQUEST['sort'] : 'mtime';
			$dir = isset($_REQUEST['dir']) ? $_REQUEST['dir'] : 'DESC';
			$start = isset($_REQUEST['start']) ? $_REQUEST['start'] : '0';
			$limit = isset($_REQUEST['limit']) ? $_REQUEST['limit'] : '0';
			$query = isset($_REQUEST['query']) ? '%'.$_REQUEST['query'].'%' : '';

			if($sort == 'grid_time')
			{
				$sort = 'time';
			}

			$response['results'] = array();
			$response['total'] = $calllog-&gt;get_calls($query, $sort, $dir, $start, $limit);
			while($call = $calllog-&gt;next_record())
			{
				$time = $call['time'];
				$call['date']=date($_SESSION['GO_SESSION']['date_format'], $time);
				$call['time']=date($_SESSION['GO_SESSION']['time_format'], $time);
				$call['grid_time']=$call['date'].' '.$call['time'];
				
				$response['results'][] = $call;
			}
			
			break;

</component><component name="main" transparent="" precode="" __ideNodeOpen="true"><file name="MainPanel.js" preprocess="">GO.@{$module}.MainPanel = function(config)
{
  if(!config)
  {
    config = {};
  }

  config.id='cl_@{$module}_grid';

  if(GO.customfields)
  {
    GO.customfields.addColumns(18, fields);
  }

  var fields = {
    fields:[
      'id', 'contact', 'customer', 'lead_name', 'salutation', 'name', 'name2', 'job_title',
      'job_role', 'email', 'phone', 'assigned_to', 'source_desc', 'campaign_desc', 'rating_desc', 'status_desc',
      'last_contacted', 'address', 'address_no', 'zip', 'city', 'state', 'country',
      'company', 'assigned_to_name'
    ],
    columns: [
      {
        xtype: 'gridcolumn',
        dataIndex: 'lead_name',
        header: 'Lead name'
      },
      {
        xtype: 'gridcolumn',
        dataIndex: 'company',
        header: 'Company'
      },
      {
        xtype: 'gridcolumn',
        dataIndex: 'assigned_to_name',
        header: 'Assigned To'
      },
      {
        xtype: 'gridcolumn',
        dataIndex: 'rating_desc',
        header: 'Rating'
      },
      {
        xtype: 'gridcolumn',
        dataIndex: 'campaign_desc',
        header: 'Campaign'
      },
      {
        xtype: 'gridcolumn',
        dataIndex: 'status_desc',
        header: 'Status'
      }
    ],
  };
  config.store = new GO.data.JsonStore({
    url: GO.settings.modules.@{$module}.url+'json.php',
    baseParams: {
     task: '@{$module}'
    },
    id: 'id',
    totalProperty: 'total',
    root: 'results',
    fields: fields.fields,
    remoteSort: true
  });

  config.store.setDefaultSort('lead_name', 'ASC');

  this.searchField = new GO.form.SearchField({
    store: config.store,
    width:320
  });
  
  config.view = new Ext.grid.GridView({
    forceFit: true,
    autoFill: true,
    emptyText : GO.lang['strNoItems']
  });
  
  config.cm = new Ext.grid.ColumnModel({
    defaults:{
      sortable:true
    },
    columns:fields.columns
  });

  config.sm = new Ext.grid.RowSelectionModel();
  config.paging=true;
  config.loadMask = true;

@{node::content($_nodes['main_toolbar'])}

	var tbar = [
	{
		iconCls: 'btn-add',
		text: GO.lang['cmdAdd'],
		cls: 'x-btn-text-icon',
		handler: function()
		{
			this.leadDialog.show();
		},
		scope: this
	}
	];

	if(GO.settings.has_admin_permission)
	{
		tbar.push({
			iconCls: 'btn-delete',
			text: GO.lang['cmdDelete'],
			cls: 'x-btn-text-icon',
			handler: function()
			{	
				this.deleteSelected();
			},
			scope: this
		});
		tbar.push({
			iconCls: 'btn-admin',
			text: GO.lang['cmdAdmin'],
			cls: 'x-btn-text-icon',
			handler: function()
			{	
				this.adminDialog.show();
			},
			scope: this
		});
	}
	
/* prueba de levantar el popup */

	config.tbar = new Ext.Toolbar({
		cls:'go-head-tb',
		items: [tbar,
				'-',
		         GO.lang['strSearch']+':',
		        this.searchField]
		    
	});

  GO.@{$module}.MainPanel.superclass.constructor.call(this,config);

  this.on("rowdblclick",this.rowDoubleClick, this);
  this.on('rowcontextmenu', this.onContextClick, this);
  
};

Ext.extend(GO.@{$module}.MainPanel, GO.grid.GridPanel,{

  afterRender : function(){
    GO.@{$module}.MainPanel.superclass.afterRender.call(this);
    
    this.store.load();

    if(!this.@{$dialog}Dialog)
    {
      this.@{$dialog}Dialog = new GO.@{$module}.@{UpperCamelCase($dialog)}Dialog();
      this.@{$dialog}Dialog.on('save', function()
      {
        this.store.reload();
      },this)
    }
  },

  rowDoubleClick : function (grid)
  {
    var selectionModel = grid.getSelectionModel();
    var record = selectionModel.getSelected();

    this.@{$dialog}Dialog.show(record.data);
  },

  onContextClick : function(grid, index, e)
  {
    if(!this.menu)
    {
      this.menu = new Ext.menu.Menu({
        id:'cf-@{$module}-grid-ctx',
        items: [
        {
          text:GO.@{$module}.lang.save,
          scope:this,
          handler: function()
          {
            var record = grid.selModel.getSelected();

            GO.@{$module}.show@{UpperCamelCase($dialog)}Dialog();
          }
        }]
      });
    }

    e.stopEvent();

    if(GO.@{$module} &amp;&amp; GO.settings.has_admin_permission)
    {
      this.ctxRecord = this.store.getAt(index);
      this.menu.showAt(e.getXY());
    }
  }
  
});

GO.moduleManager.addModule('@{$module}', GO.@{$module}.MainPanel, {
  title : GO.@{$module}.lang.@{$module},
  iconCls : 'go-tab-icon-@{$module}'
});
</file></component><component name="dialog" transparent="" precode="" __ideNodeOpen="false"><file name="@{$dialog}Dialog.js" preprocess="">GO.@{$module}.@{$dialog}Dialog = function(config){

  if(!config)
  {
    config = {};
  }

  this.buildForm();

  config.layout='fit';
  config.title=GO.@{$module}.lang.@{strtolower($dialog)};
  config.modal=false;
  config.border=false;
  config.width=800;
  config.autoHeight=true;
  config.resizable=false;
  config.plain=true;
  config.shadow=false,
  config.closeAction='hide';
  config.items=this.formPanel;

@{@node::content($_nodes['dialog_config'])}
    
  GO.@{$module}.@{$dialog}Dialog.superclass.constructor.call(this,config);
  
  this.addEvents({'save' : true});
}

Ext.extend(GO.@{$module}.@{$dialog}Dialog, Ext.Window, {
@{@node::content($_nodes['dialog_extend'])}
  buildForm : function () 
  {
@{@node::content($_nodes['dialog_buildForm'])}
  }  
});</file></component><component name="main_toolbar" transparent="" precode="" __ideNodeOpen="false">  var tbar = [
@{node::content($_nodes['main_toolbar_button'],",")}
  ];

@{node::content($_nodes['main_toolbar_conditionalButton'],",")}

  config.tbar = new Ext.Toolbar({
    cls:'go-head-tb',
    items: [tbar,
        '-',
            GO.lang['strSearch']+':',
            this.searchField]
  });
</component><component name="main_toolbar_button" transparent="" precode="" __ideNodeOpen="false">  {
    iconCls: ${$iconCls/*btn-add|btn-delete*/},
    text: GO.lang[${lang/*cmdAdd|cmdDelete*/}],
    cls: 'x-btn-text-icon',
    handler: function()
    {
      @{node::content($_)}
    },
    scope: this
  }
</component><component name="main_toolbar_conditionalButton" transparent="" precode="" __ideNodeOpen="false">  if(@{$condition/*GO.settings.has_admin_permission*/})
  {
    tbar.push({
      iconCls: ${$iconCls/*btn-add|btn-delete*/},
      text: GO.lang[${lang/*cmdAdd|cmdDelete*/}],
      cls: 'x-btn-text-icon',
      handler: function()
      {  
        @{node::content($_)}
      },
      scope: this
    });
  }
</component><component name="datefield" transparent="" precode="" __ideNodeOpen="false">    this.@{$name} = new Ext.form.DateField({
      name : ${$name},
      format : GO.settings['date_format'],
      fieldLabel: GO.lang.strDate,
      allowBlank : false
    });
</component><component name="timefield" transparent="" precode="" __ideNodeOpen="false">    this.@{$name} = new Ext.form.TimeField({
      name : ${$name},
      format : GO.settings['time_format'],
      fieldLabel: GO.lang.strTime,
      allowBlank : false
    });
</component><component name="combofield" transparent="" precode="" __ideNodeOpen="false">    this.@{$name}_store = new Ext.data.JsonStore({
      baseParams: {'task': '@{$name}'},
      autoDestroy: true,
      url: GO.settings.modules.@{$module}.url+'json.php',
      storeId: '@{$name}_store',
      root: 'results',
      idProperty: 'value',
      fields: ['value','description']
    });
    this.@{$name} = new Ext.form.ComboBox({
      name : ${$name},
      store : this.@{$name}_store,
      displayField:'description',
      valueField:'value',
      fieldLabel: @{$lang},
      allowBlank : false,
      mode:'remote',
      triggerAction: 'all',
      editable: false,
      emptyText:GO.bookmarks.lang.showAll,
      selectOnFocus :false,
    });
</component><component name="date" transparent="" precode="" __ideNodeOpen="false">this.@{$name}_picker = new Ext.DatePicker({
  xtype:'this.datePicker',
  name:'@{$name}_picker',
  format: GO.settings.date_format,
  fieldLabel:GO.lang.strDate
});
this.@{$name} = new Ext.form.Hidden({
Â  name:'@{$name}',
});
</component><component name="SelectLink" transparent="" precode="" __ideNodeOpen="false">    this.@{$name} = new GO.form.SelectLink({});
</component><component name="dialog_config" transparent="" precode="" __ideNodeOpen="false">@{node::content($_)}</component><component name="dialog_extend" transparent="" precode="" __ideNodeOpen="false">@{node::content($_)}</component><component name="dialog_buildForm" transparent="" precode="" __ideNodeOpen="false">@{node::content($_)}</component><component name="dialog_extend_onsubmit" transparent="" precode="" __ideNodeOpen="false">  submitForm : function(hide)
  {
    this.formPanel.form.submit(
    {    
      url:GO.settings.modules.@{$module}.url+'json.php',
      waitMsg:GO.lang['waitMsgSave'],
      scope:this,
@{node::content($_)}
    });    
  },
</component><component name="module" transparent="" precode="" __ideNodeOpen="true"><if condition="!file_exists(&quot;jslibs.txt&quot;)" __ideNodeOpen="false"><file name="jslibs.txt" preprocess="" __ideNodeOpen="true">modules/@{$module}/MainPanel.js
@{node::content($_nodes['module_jslibs'])}#{
$_res=array();
foreach($_e-&gt;getElementsByTagName('dialog') as $_b):
  $_res[]="modules/".$module."/".$_b-&gt;getAttribute("dialog")."Dialog.js";
endforeach;
return implode("\n", $_res);
}
</file></if><if condition="!file_exists(&quot;@{UpperCamelCase($module)}Module.php&quot;)" __ideNodeOpen="false"><file name="@{UpperCamelCase($module)}Module.php" preprocess="" __ideNodeOpen="true">&lt;?php
class GO_@{UpperCamelCase($module)}_@{UpperCamelCase($module)}Module extends GO_Base_Module{
}
</file></if><if condition="!file_exists(&quot;@{UpperCamelCase($module)}Module.php&quot;)" __ideNodeOpen="false"><file name="@{UpperCamelCase($module)}Module.php" preprocess="" __ideNodeOpen="true">&lt;?php
class GO_@{UpperCamelCase($module)}_@{UpperCamelCase($module)}Module extends GO_Base_Module{
}
</file></if><if condition="!file_exists(&quot;json.php&quot;)" __ideNodeOpen="true"><file name="json.php" preprocess="" __ideNodeOpen="true">&lt;?php
require_once('../../Phoenix.php');
$GO_SECURITY-&gt;json_authenticate('@{$module}');
require_once ($GO_MODULES-&gt;modules['@{$module}']['class_path'].'@{$module}.class.inc.php');
$@{$module} = new @{$module}();
require_once($GLOBALS['GO_MODULES']-&gt;modules['addressbook']['class_path'].'addressbook.class.inc.php');
$ab = new addressbook;
try{
  $task=isset($_REQUEST['task']) ? $_REQUEST['task'] : '';
  switch($task)
  {
    case '@{$module}':
      $response['results'][] = array();
      $rows = $@{$module}-&gt;get_@{$module}($query, $sort, $dir, $start, $limit);
      while($row = $rows-&gt;next_record())
      {
        $response['results'][] = $row;
      }
      break;
  }
}catch(Exception $e)
{
  $response['feedback']=$e-&gt;getMessage();
  $response['success']=false;
}
echo json_encode($response);
</file></if><if condition="!file_exists(&quot;scripts.inc.php&quot;)" __ideNodeOpen="false"><file name="scripts.inc.php" preprocess="" __ideNodeOpen="true">&lt;?php
require($GO_LANGUAGE-&gt;get_language_file('@{$module}'));
require_once($GO_MODULES-&gt;modules['@{$module}']['class_path'].'@{$module}.class.inc.php');
if(isset($GO_MODULES-&gt;modules['customfields']))
{
  require_once($GO_MODULES-&gt;modules['customfields']['class_path'].'customfields.class.inc.php');
  $cf = new customfields();
  $GO_SCRIPTS_JS .= $cf-&gt;get_javascript(18, $lang['@{$module}']['name']);
}
</file></if><if condition="!file_exists(&quot;classes/@{$module}.class.inc.php&quot;)" __ideNodeOpen="false"><file name="classes/@{$module}.class.inc.php" preprocess="" __ideNodeOpen="true">&lt;?php

class @{$module} extends db {

  function create_row($row)
  {
    $row['id']=$this-&gt;nextid('cl_@{$module}');
    $id = ($this-&gt;insert_row('cl_@{$module}', $row)) ? $row['id'] : false;
    return $id;
  }

  function update_row($id)
  {
    $r = $this-&gt;update_row('cl_@{$module}', 'id', $id);
    return $r;
  }

  function delete_row($id)
  {
    return $this-&gt;query("DELETE FROM cl_@{$module} WHERE id=?", 'i', $id);
  }
  
  function get_row($id)
  {
    $this-&gt;query("SELECT * FROM cl_@{$module} WHERE id=?", 'i', $id);
    return $this-&gt;next_record();
  }

}
</file></if><if condition="!file_exists(&quot;install/install.sql&quot;)" __ideNodeOpen="true"><file name="install/install.sql" preprocess="" __ideNodeOpen="true">
</file></if><if condition="!file_exists(&quot;install/uninstall.sql&quot;)" __ideNodeOpen="false"><file name="install/uninstall.sql" preprocess="" __ideNodeOpen="true">
</file></if><if condition="!file_exists(&quot;language/en.js&quot;)" __ideNodeOpen="false"><file name="language/en.js" preprocess="" __ideNodeOpen="true">Ext.namespace('GO.@{$module}');
GO.@{$module}.lang={};
GO.@{$module}.lang.@{$module}='@{$module}';
</file></if><if condition="!file_exists(&quot;language/en.php&quot;)" __ideNodeOpen="true"><file name="language/en.php" preprocess="" __ideNodeOpen="true">&lt;?php
$l['@{$module}']='@{$module}';
</file></if><if condition="!file_exists(&quot;themes/Default/style.css&quot;)" __ideNodeOpen="false"><file name="themes/Default/style.css" preprocess="" __ideNodeOpen="true">.go-module-icon-@{$module} , .go-menu-icon-@{$module} {
  background-image: url('images/@{$module}.png') !important;
}

.go-tab-icon-@{$module} {
  background-image: none !important;
}
</file></if><if condition="!file_exists(&quot;themes/Black/style.css&quot;)" __ideNodeOpen="false"><file name="themes/Black/style.css" preprocess="" __ideNodeOpen="true">.go-module-icon-@{$module} , .go-menu-icon-@{$module} {
  background-image: url('images/@{$module}.png') !important;
}

.go-tab-icon-@{$module} {
  background-image: none !important;
}
</file></if><php __ideNodeOpen="false">createDir("themes/Default/images");
createDir("themes/Black/images");
</php><if condition="!file_exists(&quot;language/en.inc.php&quot;)" __ideNodeOpen="true"><file name="language/en.inc.php" preprocess="" __ideNodeOpen="true">&lt;?php
//Uncomment this line in new translations!
//require($GO_LANGUAGE-&gt;get_fallback_language_file('@{$module}'));

$lang['@{$module}']['name']='@{$module}';
$lang['@{$module}']['description']='@{$module_description}';
$lang['@{$module}']['@{$module}']='@{$module}';
$lang['@{$module}']['showOnSummary']='@{$module_summary}';
</file></if></component><component name="module_jslibs" transparent="" precode="" __ideNodeOpen="false">@{node::content($_)}</component><component name="module_linkable" transparent="" precode="" __ideNodeOpen="false">/*
 * If your module has a linkable item, you should add a link handler like this. 
 * The index (no. 1 in this case) should be a unique identifier of your item.
 * See classes/base/links.class.inc for an overview.
 * 
 * Basically this function opens a project window when a user clicks on it from a 
 * panel with links. 
 */

GO.linkHandlers["GO_@{$module}_Model_@{$dialog}"]=function(id){
  if(!GO.@{$module}.linkWindow){
    var panel = new GO.@{$module}.@{$dialog}Dialog();
    GO.@{$module}.linkWindow= new GO.LinkViewWindow({
      title: GO.@{$module}.lang.@{strtolower($dialog)},
      items: panel,
      panel: panel,
      closeAction:"hide"
    });
  }
  GO.@{$module}.linkWindow.panel.load(id);
  GO.@{$module}.linkWindow.show();
  return GO.@{$module}.linkWindow;
}

GO.linkPreviewPanels["GO_@{$module}_Model_@{$dialog}"]=function(config){
  config = config || {};
  return new GO.@{$module}.@{$dialog}Dialog(config);
}
/* {LINKHANDLERS} */
GO.@{$module}.show@{$dialog}Dialog = function(config){

  if(!GO.@{$module}.@{strtolower(substr($dialog,0,1)).substr($dialog,1)}Dialog)
    GO.@{$module}.@{strtolower(substr($dialog,0,1)).substr($dialog,1)}Dialog = new GO.@{$module}.@{$dialog}Dialog();
  
  GO.@{$module}.@{strtolower(substr($dialog,0,1)).substr($dialog,1)}Dialog.show(config);
}

GO.newMenuItems.push({
  text: GO.@{$module}.lang.@{strtolower($dialog)},
  iconCls: 'go-model-icon-GO_@{$module}_Model_@{$dialog}-toolbar',
  handler:function(item, e){
    //by scrapy
    if(typeof item.parentMenu=="undefined"){
      item.parentMenu={
        link_config:GO.MainLayout.link_config
      };
    }
    GO.@{$module}.show@{$dialog}Dialog(0, {
      link_config: item.parentMenu.link_config      
    });
  }
});</component><component name="imprime" transparent="" precode="" __ideNodeOpen="false">#{echo node::content($_);}</component><php __ideNodeOpen="false">//BORRAR CACHE
foreach(glob('c:/temp/cache/*') as $f){
if(is_file($f)) unlink($f);
}
</php><component name="module_base" transparent="" precode="" __ideNodeOpen="true"/></package><path path="C:\Program Files (x86)\Zend\Apache2\htdocs\gov1\modules\leads" __ideNodeOpen="true"><module module="leads" __ideNodeOpen="true"><dialog dialog="Lead" module="leads" __ideNodeOpen="true"><dialog_config __ideNodeOpen="true">  config.buttons=[
    {
      text:GO.lang['cmdSave'],
      handler: function()
      {
        this.submitForm(true)
      },
      scope: this
    },
    {
      text:GO.lang['cmdCancel'],
      handler: function()
      {
        this.hide()
      },
      scope: this
    }
  ];
</dialog_config><dialog_extend __ideNodeOpen="true">  show : function(config) {
    if (config.link_config) {
      this.link_config = config.link_config;
      if (config.link_config.modelNameAndId) {
        this.selectLinkField.setValue(config.link_config.modelNameAndId);
        this.selectLinkField.setRemoteText(config.link_config.text);
        var me=this;
        this.phone_store.baseParams.link=config.link_config.modelNameAndId;
        if(!this.phone_store.loaded)this.phone_store.load();
      }
    }
    GO.calllog.CallDialog.superclass.show.call(this);
  },
<dialog_extend_onsubmit module="calllog" __ideNodeOpen="true">      params: {
        task:'save_row',
        id:this.call_id
      },
      success:function(form, action)
      {
        if(action.result.id)
        {
          this.call_id=action.result.id;
        }
      
        this.fireEvent('save');
        
        if(hide)
        {
          this.hide();
        }
      },
      failure: function(form, action) 
      {
        var error = '';
        if(action.failureType=='client')
        {
          error = GO.lang['strErrorsInForm'];
        }else
        {
          error = action.result.feedback;
        }
        Ext.MessageBox.alert(GO.lang['strError'], error);
      },
</dialog_extend_onsubmit></dialog_extend><dialog_buildForm __ideNodeOpen="true">
    this.formPanel = <ext.fragment encode="" __ideNodeOpen="true" indent="true"><ext class="Ext.Panel" title="title&lt;" frame="true"/></ext.fragment></dialog_buildForm></dialog><main module="leads" dialog="lead" __ideNodeOpen="false"/></module></path></root>