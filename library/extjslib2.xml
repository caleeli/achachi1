<?xml version="1.0" encoding="UTF-8"?>
<root><definitions __ideNodeOpen="true"><file __ideNodeOpen="true" name="$ACH_LIBRARY_PATH/extjslib2.class.php">&lt;?php

class extjs {
  public static function create($node){
    global $core;
    $cnf = array();
    $items = array();
    $children = array();
    foreach($node-&gt;attributes as $a) if($a-&gt;nodeName!="class" &amp;&amp; substr($a-&gt;nodeName,0,1)!="_"){
      $cnf[] = '"'.$a-&gt;nodeName.'":'.extjs::encode($a-&gt;nodeValue);
    }
    foreach($node-&gt;childNodes as $ch) {
      $res=$core-&gt;makeFromNode($ch);
      foreach($res as $re){
        //if($re[0]=="ext") $items[]=$re[1];
        if($re[0]=="ext.attribute") $cnf[]=$re[1];
        else $items[]=$re[1];
        $children[]=$re[1];
      }
    }
    if($node-&gt;nodeName=="ext.attribute") {
      if($node-&gt;getAttribute("type")=="array") $items='['.implode(',', $items).']';
      elseif($node-&gt;getAttribute("type")=="object") $items='{'.implode(',', $items).'}';
      elseif($node-&gt;getAttribute("type")=="string") $items=extjs::encode(implode('', $children));
      else $items=implode('', $children);
      return array(array($node-&gt;nodeName, extjs::encode($node-&gt;getAttribute("name")).':'. $items));
    } else {  //ext
      if($items) {
        $items='['.implode(',', $items).']';
        $cnf[]='"items":'.$items;
      }
      $cnf = implode(",", $cnf);
      return array(array($node-&gt;nodeName, "new ".$node-&gt;getAttribute("class")."({".$cnf."})"));
    }
  }
  public static function encode($value){
    if($value==="true") $value=true;
    elseif($value==="false") $value=false;
    elseif(is_numeric($value)) $value=0+$value;
    return json_encode($value);
  }
}
</file><def name="ext.attribute" __ideNodeOpen="true"><function name="run" __ideNodeOpen="true">  require_once(ACH_LIBRARY_PATH."/extjslib2.class.php");
  return extjs::create($e);
</function></def><def name="ext" __ideNodeOpen="true"><function name="run" __ideNodeOpen="true">  require_once(ACH_LIBRARY_PATH."/extjslib2.class.php");
  return extjs::create($e);
</function></def><component name="ext.fragment" transparent="" __ideNodeOpen="true">#{
  $_res = @node::content($_nodes['ext']);
  if(@$indent/*true|false*/):
    require_once(ACH_PATH.'/common/format_javascript.php');
    $_res = trim(htmlspecialchars_decode(strip_tags(format_javascript($_res))));
  endif;
  if(@$encode/*json_encode|var_export*/=="json_encode") return json_encode($_res);
  elseif(@$encode=="var_export") return var_export($_res, true);
  elseif(!@$encode) return $_res;
  return call_user_func_array($encode, array($_res));
}</component><component name="ext.document" transparent="" __ideNodeOpen="true"><!--#editor.plugin


componentsIndex["ext.document"]={"name":"ext.document",image:"images/16/extdocument.gif"};
componentsIndex["ext.fragment"]={"name":"ext.fragment",image:"images/16/view.gif"};
componentsIndex["ext"]={"name":"ext","attributes":[{"name":"class","value":"","domain":"ext_class"},{"name":"inputType","domain":"ext_form_field"},{"name":"region","domain":"ext_region"},{"name":"layout","domain":"ext_layout"}],"image":"images/16/_tag.gif"};
componentsIndex["ext.attribute"]={"name":"ext.attribute","attributes":[{"name":"name","value":"eventname","domain":"string"},{"name":"isArray","value":"false","domain":"_boolean"},{"name":"isString","value":"false","domain":"_boolean"}],"image":"images/16/leaf.gif"};

installPlugin({
  "name":"ExtJSEditor",
  "nodesEditor":["ext.document","ext","ext.fragment","ext.attribute"],
  "launch":function(node)
    {
      changeEditor("ExtJSEditor");
      //if(document.getElementById("ExtJSEditor").firstChild.contentWindow && document.getElementById("ExtJSEditor").firstChild.contentWindow.readyForAction) document.getElementById("ExtJSEditor").firstChild.contentWindow.location.reload(true);
    },
  "create":function()
    {
      var div = document.createElement("div");
      div.style.height="100%";
      div.style.border="none";
      draw3(div,[
        "iframe",{src:"../library/extjslib2.editor.php?"+new Date().getTime(),style:"border:none;width:100%;height:100%"},[]
      ]);
      return div;
    }
});

window.ext_class=["Ext.form.BasicForm",
"Ext.form.FormPanel",
"Ext.form.TextField",
"Ext.form.Checkbox",
"Ext.form.CheckboxGroup",
"Ext.form.ComboBox",
"Ext.form.CompositeField",
"Ext.form.DateField",
"Ext.form.DisplayField",
"Ext.form.Field",
"Ext.form.FieldSet",
"Ext.form.Hidden",
"Ext.formEditor",
"Ext.form.Label",
"Ext.form.NumberField",
"Ext.form.Radio",
"Ext.form.RadioGroup",
"Ext.form.SliderField",
"Ext.form.TextArea",
"Ext.form.TimeField",
"Ext.Action",
"Ext.Ajax",
"Ext.BoxComponent",
"Ext.Button",
"Ext.ButtonGroup",
"Ext.chart.Axis",
"Ext.chart.BarChart",
"Ext.chart.BarSeries",
"Ext.chart.CartesianChart",
"Ext.chart.CartesianSeries",
"Ext.chart.CategoryAxis",
"Ext.chart.Chart",
"Ext.chart.ColumnChart",
"Ext.chart.ColumnSeries",
"Ext.chart.LineChart",
"Ext.chart.LineSeries",
"Ext.chart.NumericAxis",
"Ext.chart.PieChart",
"Ext.chart.PieSeries",
"Ext.chart.Series",
"Ext.chart.StackedBarChart",
"Ext.chart.StackedColumnChart",
"Ext.chart.TimeAxis",
"Ext.ColorPalette",
"Ext.Component",
"Ext.ComponentMgr",
"Ext.CompositeElement",
"Ext.CompositeElementLite",
"Ext.Container",
"Ext.CycleButton",
"Ext.data.Api.Error",
"Ext.data.Api",
"Ext.data.ArrayReader",
"Ext.data.ArrayStore",
"Ext.data.Connection",
"Ext.data.DataProxy.Error",
"Ext.data.DataProxy",
"Ext.data.DataReader.Error",
"Ext.data.DataReader",
"Ext.data.DataWriter",
"Ext.data.DirectProxy",
"Ext.data.DirectStore",
"Ext.data.Field",
"Ext.data.GroupingStore",
"Ext.data.HttpProxy",
"Ext.data.JsonReader.Error",
"Ext.data.JsonReader",
"Ext.data.JsonStore",
"Ext.data.JsonWriter",
"Ext.data.MemoryProxy",
"Ext.data.Node",
"Ext.data.Record",
"Ext.data.Request",
"Ext.data.Response",
"Ext.data.ScriptTagProxy",
"Ext.data.SortTypes",
"Ext.data.Store.Error",
"Ext.data.Store",
"Ext.data.Tree",
"Ext.data.Types",
"Ext.data.XmlReader",
"Ext.data.XmlStore",
"Ext.data.XmlWriter",
"Ext.DataView",
"Ext.DatePicker",
"Ext.dd.DD",
"Ext.dd.DDProxy",
"Ext.dd.DDTarget",
"Ext.dd.DragDrop",
"Ext.dd.DragDropMgr",
"Ext.dd.DragSource",
"Ext.dd.DragTracker",
"Ext.dd.DragZone",
"Ext.dd.DropTarget",
"Ext.dd.DropZone",
"Ext.dd.PanelProxy",
"Ext.dd.Registry",
"Ext.dd.ScrollManager",
"Ext.dd.StatusProxy",
"Ext.Direct",
"Ext.direct.JsonProvider",
"Ext.direct.PollingProvider",
"Ext.direct.Provider",
"Ext.direct.RemotingProvider",
"Ext.Direct.Transaction",
"Ext.DomHelper",
"Ext.DomQuery",
"Ext.Editor",
"Ext.Element",
"Ext.Error",
"Ext.EventManager",
"Ext.EventObject",
"Ext.FlashComponent",
"Ext.FlashProxy",
"Ext.form.Action.DirectLoad",
"Ext.form.Action.DirectSubmit",
"Ext.form.Action",
"Ext.form.Action.Load",
"Ext.form.Action.Submit",
"Ext.form.BasicForm",
"Ext.form.Checkbox",
"Ext.form.CheckboxGroup",
"Ext.form.ComboBox",
"Ext.form.CompositeField",
"Ext.form.DateField",
"Ext.form.DisplayField",
"Ext.form.Field",
"Ext.form.FieldSet",
"Ext.form.FormPanel",
"Ext.form.Hidden",
"Ext.formEditor",
"Ext.form.Label",
"Ext.form.NumberField",
"Ext.form.Radio",
"Ext.form.RadioGroup",
"Ext.form.SliderField",
"Ext.form.TextArea",
"Ext.form.TextField",
"Ext.form.TimeField",
"Ext.form.TriggerField",
"Ext.form.TwinTriggerField",
"Ext.form.VTypes",
"Ext.Fx",
"Ext.grid.AbstractSelectionModel",
"Ext.grid.BooleanColumn",
"Ext.grid.CellSelectionModel",
"Ext.grid.CheckboxSelectionModel",
"Ext.grid.Column",
"Ext.grid.ColumnModel",
"Ext.grid.DateColumn",
"Ext.grid.EditorGridPanel",
"Ext.grid.GridDragZone",
"Ext.grid.GridPanel",
"Ext.grid.GridView",
"Ext.grid.GroupingView",
"Ext.grid.NumberColumn",
"Ext.grid.PropertyColumnModel",
"Ext.grid.PropertyGrid",
"Ext.grid.PropertyRecord",
"Ext.grid.PropertyStore",
"Ext.grid.RowNumberer",
"Ext.grid.RowSelectionModel",
"Ext.grid.TemplateColumn",
"Ext.History",
"Ext",
"Ext.KeyMap",
"Ext.KeyNav",
"Ext.Layer",
"Ext.layout.AbsoluteLayout",
"Ext.layout.AccordionLayout",
"Ext.layout.AnchorLayout",
"Ext.layout.AutoLayout",
"Ext.layout.BorderLayout",
"Ext.layout.BorderLayout.Region",
"Ext.layout.BorderLayout.SplitRegion",
"Ext.layout.BoxLayout",
"Ext.layout.CardLayout",
"Ext.layout.ColumnLayout",
"Ext.layout.ContainerLayout",
"Ext.layout.FitLayout",
"Ext.layout.FormLayout",
"Ext.layout.HBoxLayout",
"Ext.layout.MenuLayout",
"Ext.layout.TableLayout",
"Ext.layout.ToolbarLayout",
"Ext.layout.VBoxLayout",
"Ext.list.BooleanColumn",
"Ext.list.Column",
"Ext.list.ColumnResizer",
"Ext.list.DateColumn",
"Ext.list.ListView",
"Ext.list.NumberColumn",
"Ext.list.Sorter",
"Ext.Loader",
"Ext.LoadMask",
"Ext.menu.BaseItem",
"Ext.menu.CheckItem",
"Ext.menu.ColorMenu",
"Ext.menu.DateMenu",
"Ext.menu.Item",
"Ext.menu.Menu",
"Ext.menu.MenuMgr",
"Ext.menu.Separator",
"Ext.menu.TextItem",
"Ext.MessageBox",
"Ext.PagingToolbar",
"Ext.Panel",
"Ext.ProgressBar",
"Ext.QuickTip",
"Ext.QuickTips",
"Ext.Resizable",
"Ext.Shadow",
"Ext.slider.MultiSlider",
"Ext.slider.SingleSlider",
"Ext.slider.Thumb",
"Ext.slider.Tip",
"Ext.Spacer",
"Ext.SplitBar.AbsoluteLayoutAdapter",
"Ext.SplitBar.BasicLayoutAdapter",
"Ext.SplitBar",
"Ext.SplitButton",
"Ext.state.CookieProvider",
"Ext.state.Manager",
"Ext.state.Provider",
"Ext.StoreMgr",
"Ext.TabPanel",
"Ext.TaskMgr",
"Ext.Template",
"Ext.Tip",
"Ext.Toolbar.Fill",
"Ext.Toolbar",
"Ext.Toolbar.Item",
"Ext.Toolbar.Separator",
"Ext.Toolbar.Spacer",
"Ext.Toolbar.TextItem",
"Ext.ToolTip",
"Ext.tree.AsyncTreeNode",
"Ext.tree.DefaultSelectionModel",
"Ext.tree.MultiSelectionModel",
"Ext.tree.RootTreeNodeUI",
"Ext.tree.TreeDragZone",
"Ext.tree.TreeDropZone",
"Ext.tree.TreeEditor",
"Ext.tree.TreeFilter",
"Ext.tree.TreeLoader",
"Ext.tree.TreeNode",
"Ext.tree.TreeNodeUI",
"Ext.tree.TreePanel",
"Ext.tree.TreeSorter",
"Ext.Updater.BasicRenderer",
"Ext.Updater.defaults",
"Ext.Updater",
"Ext.util.ClickRepeater",
"Ext.util.Cookies",
"Ext.util.CSS",
"Ext.util.DelayedTask",
"Ext.util.Format",
"Ext.util.JSON",
"Ext.util.MixedCollection",
"Ext.util.Observable",
"Ext.util.TaskRunner",
"Ext.util.TextMetrics",
"Ext.Viewport",
"Ext.Window",
"Ext.WindowGroup",
"Ext.WindowMgr",
"Ext.XTemplate"];
window.ext_inputType=["text","password","radio","file"];
window.ext_region=["center","north","south","west","east"];
window.ext_layout=[
  "absolute",
  "accordion",
  "anchor",
  "auto",
  "border",
  "region",
  "splitregion",
  "box",
  "card",
  "column",
  "container",
  "fit",
  "form",
  "hbox",
  "menu",
  "table",
  "toolbar",
  "vbox"
];
window.ext_attribute_type=["array","object","string"];

if(toolbar.load){
  /**
   * This adds ExtJs buttons to the toolbar.
   **/
  toolbar.add(
  [
    {"name":" ",tab:"ExtJs"},
    [
      {"name":"ext.page","action":function(){appendChildTag("ext.page",{name:"index"});},"image":"images/32/ext_page.gif","help":"An ExtJS Page."},
      {"name":"ext.fragment","action":function(){appendChildTag("ext.fragment");},"image":"images/32/ext_fragment.gif","help":"ExtJS Page Fragment."},
      {"name":"ext.document","action":function(){appendChildTag("ext.document",{name:"index"});},"image":"images/32/extdocument.gif","help":"Container for Ext JS components."},
      {"name":"ext","action":function(){appendChildTag("ext");},"image":"images/32/extjs_component.gif","help":"Ext JS component."},
      {"name":"ext.attribute","action":function(){appendChildTag("ext.attribute",{name:"name"});},"image":"images/32/extjs_attribute.gif","help":"Define an attribute for an extjs component. Ex. buttons"},
      {"name":"expression","action":function(){appendChildTag("expression",{},"{}");},"image":"images/32/extjs_expression.gif","help":"Defines an expression atribute for an extjs component. Equal to event. Example. handler:function(){...} "},
      {"name":"layout","action":function(){appendChildTag("layout");},"image":"images/32/layout.jpg"},
      {"name":"window","action":function(){appendChildTag("window");},"image":"images/32/window.gif"},
      {"name":"TabPanel","help":"Ext.TabPanel",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.TabPanel",region:"center",title:"title",activeTab:"0",frame:"true"},[
            "ext",{"class":"Ext.Panel",title:"title",closable:"false"},[]
          ]);
        },
        "image":"images/32/tabpanel.png"
      },
      {"name":"Panel","help":"Ext.Panel",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.Panel",region:"center",title:"title",frame:"true"},[]);
        },
        "image":"images/32/window.gif"
      }
    ],
    [
      {"name":"FormPanel","help":"Ext.form.FormPanel",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.form.FormPanel",region:"center",title:"title",frame:"true",url:"action",standardSubmit:"true"},[]);
        },
        "image":"images/32/form.jpg"
      },
      {"name":"TextField","help":"Ext.form.TextField",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.form.TextField",name:"name",fieldLabel:"fieldLabel",inputType:"text"},[]);
        },
        "image":"images/32/textfield.png"
      },
      {"name":"Button","help":"Ext.Button",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.Button",name:"name",text:"text",type:"submit"},[
            "event",{name:"handler"},"function(a,b){this.ownerCt.ownerCt.getForm().submit();}"
          ]);
        },
        "image":"images/32/button.png"
      }
    ],
    [
      {"name":"TreePanel",
        "action":function(){
          appendChildTag("ext",{"class":"Ext.tree.TreePanel",region:"weast",title:"title",width:200,dataUrl:"dataurl"},[
            "attribute",{name:"root"},["ext",{"class":"Ext.tree.AsyncTreeNode",id:"root",text:"root"}]
          ]);
        },
        "image":"images/32/treepanel.jpg"
      },
      {"name":"Data",
        "action":function(){appendChildTag("action",{name:"dataurl",noRender:"true"},
            "$tree=array(\n"+
            "  array('id'=>'1','text'=>'node 1','leaf'=>true),\n"+
            "  array('id'=>'2','text'=>'node 2','children'=>array(\n"+
            "      array('id'=>'2.1','text'=>'node 2.1','leaf'=>true)\n"+
            "    )\n"+
            "  ),\n"+
            ");\n"+
            "print(json_encode($tree));"
          );
        },
        "image":"images/32/treepanel_data.jpg"
      },
      {"name":"click",
        "action":function(){appendChildTag("expression",{name:"listeners"},
          "{click: function(node, event){\n"+
          "    Ext.Msg.alert('Event','click on '+node.text);"+
          "}}"
          );
        },
        "image":"images/32/treepanel.jpg"
      }
    ],
    {"name":"import",
      "action":function(){
        var url=prompt("Local URL","/ext/examples/form/dynamic.html");
        extjs_capturer.start(url,function(xml){
          var aNode = Z.xml2array(xml);
          appendChildTag(aNode[0],aNode[1],aNode[2]);
          document.getElementById("ExtJSEditor").firstChild.contentWindow.extjs_refresh()
        });
      },
      "image":"images/32/extjs_inspect.gif"
    }
  ], true);
}

/**
 * Captura de componentes ExtJs de otras paginas
 * @author David Callizaya
 */
var extjs_capturer =
{
  start:function(url,success){
    if(this.remoteWindow && this.remoteWindow.close) this.remoteWindow.close();
    this.remoteWindow=window.open(url,"extjs_capturer_"+new Date().getTime()).onload=function(){
      var remoteWindow=this;
      this.document.body.onmousemove=function(e){
        if(extjs_capturer.lastTarget){
          //extjs_capturer.lastTarget.style.border=extjs_capturer.lastBorder;
          extjs_capturer.lastTarget.className=extjs_capturer.lastTarget.className.split(" boxShadow").join("");
        }
        var target=e.target;
        while(target && (!target.id || !remoteWindow.Ext.getCmp(target.id))){
          target=target.parentNode;
        }
        if(target && target.id){
          if(remoteWindow.Ext.getCmp(target.id)){
            extjs_capturer.lastTarget=target;
            //extjs_capturer.lastBorder=target.style.border;
            //target.style.border="2px solid red";
            extjs_capturer.lastTarget.className=extjs_capturer.lastTarget.className.split(" boxShadow").join("");
            extjs_capturer.lastTarget.className+=" boxShadow";
          }
        }
      };
      this.document.body.ondblclick=function(){
        var cmp,e;
        if(extjs_capturer.lastTarget ){
          try{
            cmp=remoteWindow.Ext.getCmp(extjs_capturer.lastTarget.id);
          } catch(e) {}
          if(cmp) {
            if(typeof(success)=="function") {
              var cap=extjs_capturer.toXml2(cmp,extjs_capturer.createDom(""),[],[]);
              success(cap);
  //            success(extjs_capturer.createDom(extjs_capturer.toXml(cmp)).firstChild);
            }
          }
          //console.debug(extjs_capturer.toXml(remoteWindow.Ext.getCmp(extjs_capturer.lastTarget.id)));
        }
      };
      var style=".boxShadow {  "+
      "    outline: 2px solid #15428B;"+
      "    -moz-box-shadow: 5px 5px 5px #888;  "+
      "    -webkit-box-shadow: 5px 5px 5px #888;  "+
      '    -ms-filter: "progid:DXImageTransform.Microsoft.Shadow(color=#888888,direction=125,strength=5)"; /* IE8+ */  '+
      "    filter: progid:DXImageTransform.Microsoft.Shadow(color=#888888,direction=125,strength=5); /* IE7 and lower */  "+
      "    text-shadow: 1px 1px 1px #cccccc; /* CSS3-compatible browsers */  "+
      "    filter: dropshadow(color=#cccccc, offx=1, offy=1); /* IE */  "+
      "    opacity: 0.5;  "+
      '    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";/*IE8+*/  '+
      "    filter: alpha(opacity=50); /* IE7 and lower */  "+
      "}       ";
      var o=this.document.createElement("style");
      o.setAttribute("type", "text/css");
      try{
        o.innerHTML=style;
      } catch (e) {
        o.styleSheet.cssText=style;
      }
      this.document.body.appendChild(o);
    };
  },
  list:{
    'box':'Ext.BoxComponent',
    'button':'Ext.Button',
    'buttongroup':'Ext.ButtonGroup',
    'colorpalette':'Ext.ColorPalette',
    'component':'Ext.Component',
    'container':'Ext.Container',
    'cycle':'Ext.CycleButton',
    'dataview':'Ext.DataView',
    'datepicker':'Ext.DatePicker',
    'editor':'Ext.Editor',
    'editorgrid':'Ext.grid.EditorGridPanel',
    'flash':'Ext.FlashComponent',
    'grid':'Ext.grid.GridPanel',
    'listview':'Ext.ListView',
    'multislider':'Ext.slider.MultiSlider',
    'panel':'Ext.Panel',
    'progress':'Ext.ProgressBar',
    'propertygrid':'Ext.grid.PropertyGrid',
    'slider':'Ext.slider.SingleSlider',
    'spacer':'Ext.Spacer',
    'splitbutton':'Ext.SplitButton',
    'tabpanel':'Ext.TabPanel',
    'treepanel':'Ext.tree.TreePanel',
    'viewport':'Ext.ViewPort',
    'window':'Ext.Window',
    'paging':'Ext.PagingToolbar',
    'toolbar':'Ext.Toolbar',
    'tbbutton':'Ext.Toolbar.Button',
    'tbfill':'Ext.Toolbar.Fill',
    'tbitem':'Ext.Toolbar.Item',
    'tbseparator':'Ext.Toolbar.Separator',
    'tbspacer':'Ext.Toolbar.Spacer',
    'tbsplit':'Ext.Toolbar.SplitButton',
    'tbtext':'Ext.Toolbar.TextItem',
    'menu':'Ext.menu.Menu',
    'colormenu':'Ext.menu.ColorMenu',
    'datemenu':'Ext.menu.DateMenu',
    'menubaseitem':'Ext.menu.BaseItem',
    'menucheckitem':'Ext.menu.CheckItem',
    'menuitem':'Ext.menu.Item',
    'menuseparator':'Ext.menu.Separator',
    'menutextitem':'Ext.menu.TextItem',
    'form':'Ext.form.FormPanel',
    'checkbox':'Ext.form.Checkbox',
    'checkboxgroup':'Ext.form.CheckboxGroup',
    'combo':'Ext.form.ComboBox',
    'compositefield':'Ext.form.CompositeField',
    'datefield':'Ext.form.DateField',
    'displayfield':'Ext.form.DisplayField',
    'field':'Ext.form.Field',
    'fieldset':'Ext.form.FieldSet',
    'hidden':'Ext.form.Hidden',
    'htmleditor':'Ext.form.HtmlEditor',
    'label':'Ext.form.Label',
    'numberfield':'Ext.form.NumberField',
    'radio':'Ext.form.Radio',
    'radiogroup':'Ext.form.RadioGroup',
    'textarea':'Ext.form.TextArea',
    'textfield':'Ext.form.TextField',
    'timefield':'Ext.form.TimeField',
    'trigger':'Ext.form.TriggerField',
    'chart':'Ext.chart.Chart',
    'barchart':'Ext.chart.BarChart',
    'cartesianchart':'Ext.chart.CartesianChart',
    'columnchart':'Ext.chart.ColumnChart',
    'linechart':'Ext.chart.LineChart',
    'piechart':'Ext.chart.PieChart',
    'arraystore':'Ext.data.ArrayStore',
    'directstore':'Ext.data.DirectStore',
    'groupingstore':'Ext.data.GroupingStore',
    'jsonstore':'Ext.data.JsonStore',
    'simplestore':'Ext.data.SimpleStore',
    'store':'Ext.data.Store',
    'xmlstore':'Ext.data.XmlStore'
  },
  capture:function(id){
    var cmp=Ext.getCmp(id);console.debug(cmp);
    var cfg=this.serialize(cmp.initialConfig,[]);
    return "(v=[],c=new "+this.list[cmp.getXType()]+"("+cfg+"),v.length=0,c)";
  },
  createDom:function(xml){
    var xmlDoc;
    if (window.DOMParser)
    {
      var parser=new DOMParser();
      xmlDoc=parser.parseFromString(xml,"text/xml");
    }
    else // Internet Explorer
    {
      xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
      xmlDoc.async="false";
      xmlDoc.loadXML(xml);
    }
    return xmlDoc;
  },
  toXml:function(obj){
    var isArray=Object.prototype.toString.call(obj)=="[object Array]";
    var $class="Object";
    if(!isArray && typeof(obj.getXType)=="function"){
      $class=this.list[obj.getXType()];
    }
    if(!isArray && typeof(obj.xtype)=="string"){
      $class=this.list[obj.xtype];
    }
    if(typeof(obj.initialConfig)=="object")obj=obj.initialConfig;
    var res=[],att=[];
    for(var o in obj) if(!isArray || o==parseInt(o)){
      if(!isArray) {
        if(this.isArray(obj[o])){
          if(o=="items") res.push(this.toXml(obj[o]));
          else res.push('<ext.attribute name='+this.encodeAttribute(o)+' type="array">'+this.toXml(obj[o])+'</ext.attribute>');
        } else if(typeof(obj[o])=="object"){
          if(o=="items") res.push(this.toXml(obj[o]));
          else res.push('<ext.attribute name='+this.encodeAttribute(o)+'>'+this.toXml(obj[o])+'</ext.attribute>');
        } else if(typeof(obj[o])=="function") {
        } else {
          if(String(obj[o]).length<100) att.push(o+'='+this.encodeAttribute(obj[o]));
          else res.push('<ext.attribute name='+this.encodeAttribute(o)+' type="string">'+this.encodeEntity(obj[o])+'</ext.attribute>');
        }
      } else {
        if(this.isArray(obj[o])){
          res.push(this.toXml(obj[o]));
        } else if(typeof(obj[o])=="object"){
          res.push(this.toXml(obj[o]));
        } else if(typeof(obj[o])=="function") {
        } else {
          //res.push('<ext class="String">'+this.encodeEntity(obj[o])+'</attribute>');
        }
      }
    }
    if(isArray) return res.join("");
    else return "<ext class='"+$class+"' "+att.join(" ")+">"+res.join("")+"</ext>";
  },
  //toXml
  toXml2:function(obj,doc,domain,domain2){
    if(obj==null){
      return this.create3(doc,"#text",{},"null");
    }
    var idx;
    if((idx=this.getIndexFrom(domain,obj))>=0){
      if(domain2[idx].attributes){
        var id=domain2[idx].getAttribute("id");
        if(!id) id="cmp"+idx;
        domain2[idx].setAttribute("id",id);
        return this.create3(doc,"#text",{},"Ext.getCmp("+JSON.stringify(id)+")");
      } else {
        Z.console(domain[idx],domain2[idx]);
        //throw "No se puede enlazar";
        //console.debug("No se puede enlazar");
      }
    } else {
      idx=domain.length;
      domain.push(obj);
    }
    var isArray=Object.prototype.toString.call(obj)=="[object Array]";
    var $class="Object";
    if(!isArray && typeof(obj.getXType)=="function"){
      $class=this.list[obj.getXType()];
    }
    if(!isArray && typeof(obj.xtype)=="string"){
      $class=this.list[obj.xtype];
    }
    if(typeof(obj.initialConfig)=="object")obj=obj.initialConfig;
    var create3=this.create3;
    var result;
    if(isArray) result = [];
    else result = create3(doc,"ext",{"class":$class},[]);
    domain2[idx]=result;
    for(var o in obj) if(!isArray || o==parseInt(o)){
      try{
        if(!isArray) {
if(o=="viewConfig"){
  console.debug(obj[o],Object.prototype.toString.call(obj[o]));
}
          if(this.isArray(obj[o])){
            if(o=="items") {
              var chs=this.toXml2(obj[o],doc,domain,domain2);
              for(var i=0,l=chs.length;i<l;i++) {
                result.appendChild(chs[i]);
              }
              chs=null;
            }
            else {
              var chs=this.toXml2(obj[o],doc,domain,domain2);
              var aA=result.appendChild(create3(doc,"ext.attribute",{"name":o,type:"array"},[]));
              for(var i=0,l=chs.length;i<l;i++) {
                aA.appendChild(chs[i]);
              }
              aA=null;chs=null;
            }
          } else if(this.isObjectObject(obj[o])){
            if(o=="items") result.push(this.toXml2(obj[o],doc,domain,domain2));
            else result.appendChild(create3(doc,"ext.attribute",{name:o},this.toXml2(obj[o],doc,domain,domain2)));
          } else if(typeof(obj[o])=="function") {
          } else {
            if(String(obj[o]).length<100 && parseInt(o)!=o) result.setAttribute(o,obj[o]);
            else result.appendChild(create3(doc,"ext.attribute",{"name":o,type:"string"},String(obj[o])));
          }
        } else {
          if(this.isArray(obj[o])){
            result.push(this.toXml2(obj[o],doc,domain,domain2));
          } else if(this.isObjectObject(obj[o])){
            result.push(this.toXml2(obj[o],doc,domain,domain2));
          } else if(typeof(obj[o])=="function") {
          } else {
            //res.push('<ext.attribute class="String">'+this.encodeEntity(obj[o])+'</ext.attribute>');
          }
        }
      } catch(e) {}
    }
    create3=null;
    return result;
  },
  create3:function(doc,nodeName,atts,content){
    if(nodeName=="#text") return doc.createTextNode(content);
    var d=doc.createElement(nodeName);
    for(var a in atts) d.setAttribute(a,atts[a]);
    if(typeof(content)=="string") d.appendChild(doc.createTextNode(content));
    else {
      if(extjs_capturer.isArray(content)) {
        if((content.length % 3)==0 && typeof(content[0])=="string"){
          for(var i=0,l=content.length;i<l;i+=3){
            d.appendChild(this.create3(doc,content[i],content[i+1],content[i+2]));
          }
        } else {
          for(var i=0,l=content.length;i<l;i++){
            d.appendChild(content[i]);
          }
        }
      } else {
        d.appendChild(content);
      }
    }
    return d;
  },
  getIndexFrom:function(domain,obj){
    if(typeof(domain.indexOf)=="function") return domain.indexOf(obj);
    for(var i=0,l=domain.length;i<l;i++){
      if(domain[i]===obj) return i;
    }
    return -1;
  },
  encodeAttribute:function(value){
    var d=document.createElement("div");
    d.appendChild(document.createElement("div")).setAttribute("a",value);
    var s=d.innerHTML.substr(7);
    return s.substr(0,s.length-7);
  },
  encodeEntity:function(value){
    var d=document.createElement("div");
    d.appendChild(document.createTextNode(value));
    return d.innerHTML;
  },
  isArray:function(obj){
    return Object.prototype.toString.call(obj)=="[object Array]";
  },
  isObjectObject:function(obj){
    return Object.prototype.toString.call(obj)=="[object Object]";
  }
}
-->&lt;html&gt;
&lt;head&gt;
  #{
    if(!isset($style)) $style="";
    if(strpos($style, "ext-all")===false) $style="/ext/resources/css/ext-all.css;$style";
    $_res="";
    foreach(explode(";",$style) as $_l)
      if(trim($_l)) $_res.='&lt;link rel="stylesheet" type="text/css" href="'.$_l.'" /&gt;';
    return $_res;
  }
  #{
    if(!isset($script)) $script="";
    //if(strpos($script, "ext-base")===false) $script.=";/ext/adapter/ext/ext-base.js";
    //if(strpos($script, "ext-all")===false) $script.=";/ext/ext-all.js";
    if(strpos($script, "bootstrap")===false) $script="/ext/bootstrap.js;".$script;
    $__r="";
    foreach(explode(";",$script) as $__lib)
      if(trim($__lib)) $__r.='&lt;script type="text/javascript" src="'.$__lib.'"&gt;&lt;/script&gt;';
    return $__r;
  }
  &lt;script&gt;
    Ext.onReady(function()
    {
      Ext.Loader.setConfig({enabled:true});
      @{@node::join("\n      ",$_nodes['ext'])};
    });
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;#{
  $_nodes2=array();
  foreach($_ as $_n):
    if($_n[0]=="#text")$_nodes2[]=$_n;
  endforeach;
  return node::content($_nodes2);
}&lt;/body&gt;
&lt;/html&gt;</component><file name="$ACH_LIBRARY_PATH/extjslib2.editor.php" preprocess="" __ideNodeOpen="true">&lt;?php
if($code=@$_POST["c"]) {
  ini_set("display_errors","on");
  require_once("extjslib2.class.php");
  global $definedClasses,$generationType,$generatedPath;
  chdir("..");
  global $core;
  global $PARAMS;
  $PARAMS=array();
  
  require_once("common/formatcode.php");
  require_once("common/util.php");
  loadClasses("core");
  require_once("config.php");
  strip_mq();
  $dom = new DomDocument();
  if(substr($code,0,13)=="&lt;ext.fragment"){
    $code=str_replace("ext.document","ext.fragment",$code);
    $dom-&gt;loadXML('&lt;root&gt;&lt;include src="$library/extjslib2.xml"/&gt;'.$code.'&lt;/root&gt;');
    $e=$dom-&gt;createElement("ext");
    $e-&gt;setAttribute("class","Ext.Viewport");
    $frag=$dom-&gt;getElementsByTagName("ext.fragment")-&gt;item(0);
    foreach($frag-&gt;childNodes as $ch){
      $e-&gt;appendChild($ch);
    }
    $frag-&gt;appendChild($e);
  } else {
    $code=str_replace("ext.document","ext.fragment",$code);
    $dom-&gt;loadXML('&lt;root&gt;&lt;include src="$library/extjslib2.xml"/&gt;'.$code.'&lt;/root&gt;');
  }

  ob_start();
  global $core;
  $core=new node($dom-&gt;firstChild);
  $ext=$core-&gt;run();
  ob_end_clean();
  die($core-&gt;content($ext));
}
?&gt;<ext.document style="" script="" __ideNodeOpen="true">&lt;script&gt;
var readyForAction=false;
Ext.onReady(function(){
  readyForAction=true;
  openCurrentNode();
});
function findNode(node,nodeName){
  while(node &amp;&amp; node.nodeName!=nodeName) {
    node=node.parentNode;
  }
  if(!node) return null;
  return node;
}
function openCurrentNode(){
  if(!readyForAction) return setTimeout(openCurrentNode,100);
  var node = findNode(window.parent.currentNode,"ext.document");
  if(!node)node = findNode(window.parent.currentNode,"ext.fragment");
  if(node){
    Ext.Ajax.request({
      url:'?t='+new Date().getTime(),
      method:'POST',
      params:{c:window.parent.getXml(node)},
      success:function(transport){ try{eval(transport.responseText);} catch(e){console.debug(e)}}
    });
  }
}
function extjs_refresh(){
  window.location.reload(true);
}
&lt;/script&gt;&lt;a style=""&gt;&lt;style&gt;
.floattoolbar{
  position:absolute;
  border:1px outset white;
  display:inline-block;
  background-color:transparent;
  right:4px;
  top:8px;
  z-index:20000;
}
.floattitle{
  filter:alpha(opacity=70);
  -moz-opacity:0.7;
  -khtml-opacity: 0.7;
  opacity: 0.7;
  background-color:lightblue;
}
.floattab{
  display:inline-block;
  padding:2px;
  cursor:pointer;
}
.floattab:hover{
  background-color:white;
}
.floatbutton{
  display:inline-block;
  filter:alpha(opacity=70);
  -moz-opacity:0.7;
  -khtml-opacity: 0.7;
  opacity: 0.7;
  padding:2px;
}
.floatbutton:hover{
  background-color:white;
  filter:alpha(opacity=100);
  -moz-opacity:1;
  -khtml-opacity: 1;
  opacity: 1;
  position:relative;
}
.hover{
  filter:alpha(opacity=70);
  -moz-opacity:0.7;
  -khtml-opacity: 0.7;
  opacity: 0.7;
}
.toolbarbg{
  position:absolute;
  width:100%;
  height:20px;
  background:white;
  filter:alpha(opacity=70);
  -moz-opacity:0.7;
  -khtml-opacity: 0.7;
  opacity: 0.7;
}
&lt;/style&gt;
&lt;div id="floattoolbar" class="floattoolbar"&gt;&lt;div class="floattitle"&gt;&lt;/div&gt;&lt;div class="toolbarbg"&gt;&lt;/div&gt;&lt;span style="display:inline-block;position:relative"&gt;&lt;/span&gt;&lt;a class="floatbutton" href="javascript:extjs_refresh()"&gt;&lt;img src="images/16/refresh.gif" /&gt;&lt;/a&gt;&lt;/div&gt;</ext.document></file></definitions></root>